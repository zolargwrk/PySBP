import sys
import numpy as np
from math import *
from src.accuracy_test_1d import operator_test_1d


class CSBPTypeOperators:

    @staticmethod
    def hqd_csbp(p, xl, xr, n, b, app):
        """Computes classical SBP operators on n equally spaced nodes up to degree p = 6 for first derivative twice
            and up to p = 4 for order-matched and compatible operators
                Inputs: p   - degree of operator
                        xl  - start point of the element
                        xr  - end point of the element
                        n   - number of degrees of freedom in the mesh
                        b   - (n,1) vector for holding entries of the variable coefficient, use np.ones(n,1) for constant
                               coefficient
                        app - 1 for first derivative twice
                              2 for order-matched and compatible operator
                Outputs: h_mat  - the norm matrix
                         q_mat  - h_mat @ d_mat
                         d_mat  - first derivative operator
                         d2p    - second derivative operator
                         db_mat - normal derivative at boundaries (interfaces)
                         txL    - left projection vector
                         txR    - right projection vector
                         e_mat  - the E matrix
                         x      - the nodal locatios"""
        if p <= 4:
            bn = 2*p        # size of boundary block
        elif p == 5:
            bn = 11         # size of bn is based on paper by Klarmnn and Albin
        elif p == 6:
            bn = 14
        elif p >= 7:
            sys.exit('Only operators with degrees p <= 6 are supported')
        # elif p == 7:
        #     bn = 19
        # elif p == 8:
        #     bn = 23

        x = np.linspace(xl, xr, n)    # 1D mesh
        bn2 = bn + p                  # size of the block at boundaries including terms from center-difference
        dx = (xr-xl)/(n - 1)          # mesh size
        x_ref = np.linspace(-1, 1, n)
        dx_ref = (1 -(-1))/(n-1)

        # the H and D1 matrices
        h_mat = np.eye(n)
        d_mat = np.zeros((n, n))

        # the H and D1 matrices obtained from solution of the accuracy equation (see CSBP_Oper.py)
        if p == 1:
            h_mat[0:bn, 0:bn] = [[1/2, 0], [0, 1]]
            d_mat[0:bn, 0:bn2] = [[-1, 1, 0], [-1/2, 0, 1/2]]
        elif p == 2:
            h_mat[0:bn, 0:bn] = [[17/48, 0, 0, 0], [0, 59/48, 0, 0], [0, 0, 43/48, 0], [0, 0, 0, 49/48]]
            d_mat[0:bn, 0:bn2] = [[-24/17, 59/34, -4/17, -3/34, 0, 0], [-1/2, 0, 1/2, 0, 0, 0], [4/43, -59/86, 0, 59/86, -4/43, 0], [3/98, 0, -59/98, 0, 32/49, -4/49]]
        elif p == 3:
            h_mat[0:bn, 0:bn] = [[13649/43200, 0, 0, 0, 0, 0], [0, 12013/8640, 0, 0, 0, 0], [0, 0, 2711/4320, 0, 0, 0], [0, 0, 0, 5359/4320, 0, 0], [0, 0, 0, 0, 7877/8640, 0], [0, 0, 0, 0, 0, 43801/43200]]
            d_mat[0:bn, 0:bn2] = [[-21600/13649, 5124475092222703052468879/2505990045200315292896040, -58752909548430618941812/313248755650039411612005, -159267246833799759813661/417665007533385882149340, 18306575045382041159483/313248755650039411612005, 120512309461734500607719/2505990045200315292896040, 0, 0, 0], [-426577465431008328683/918012325152141289800, 0, 28772124531747103103/91801232515214128980, 4739194508129391986/22950308128803532245, -1828286306657606557/61200821676809419320, -2910908201471785429/114751540644017661225, 0, 0, 0], [10836021679902364246/114751540644017661225, -127495216525222408549/183602465030428257960, 0, 66294394848412989229/91801232515214128980, -3185918970301186831/22950308128803532245, 5093573171603569909/306004108384047096600, 0, 0, 0], [159267246833799759813661/1639876016830108390679400, -28465971813079192963909/122990701262258129300955, -179724104434047613799819/491962805049032517203820, 0, 540747751505546378368499/983925610098065034407640, -38969683572055185949316/614953506311290646504775, 72/5359, 0, 0], [-18306575045382041159483/903897885652927117469325, 21963203401877827569241/482078872348227795983640, 17274052656973034997682/180779577130585423493865, -540747751505546378368499/723118308522341693975460, 0, 5591070156686698065364559/7231183085223416939754600, -1296/7877, 144/7877, 0], [-120512309461734500607719/8041971570797788126905960, 34968740224280558358577/1005246446349723515863245, -13808676868217278023299/1340328595132964687817660, 77939367144110371898632/1005246446349723515863245, -5591070156686698065364559/8041971570797788126905960, 0, 32400/43801, -6480/43801, 720/43801]]
        elif p == 4:
            h_mat[0:bn, 0:bn] = [[1498139.0 / 5080320.0,0,0,0,0,0,0,0],[0,1107307.0 / 725760.0,0,0,0,0,0,0],[0,0,20761.0 / 80640.0,0,0,0,0,0],[0,0,0,1304999.0 / 725760.0,0,0,0,0],[0,0,0,0,299527.0 / 725760.0,0,0,0],[0,0,0,0,0,103097.0 / 80640.0,0,0],[0,0,0,0,0,0,670091.0 / 725760.0,0],[0,0,0,0,0,0,0,5127739.0 / 5080320.0]]
            d_mat[0:bn, 0:bn2] = [[- 1.6955436044318986,2.260864363313406,- 0.08536728645033705,- 0.7254361956662861,0.04882320268351497,0.2532706738193251,- 0.020810689629510205,- 0.03580046363821393,0,0,0,0],[- 0.4369789661365021,0,0.1180672791474405,0.4539274190403719,- 0.03545198619165169,- 0.12132305827513695,0.001808766182053583,0.019950546233424744,0,0,0,0],[0.09778106626620693,- 0.699691861722112,0,0.6563739398477709,0.11267082240058042,- 0.3342805720470325,0.2187366239704634,- 0.051590018715877206,0,0,0,0],[0.11897154784237866,- 0.3851627538376176,- 0.09397924005046453,0,0.14570996944041065,0.28170129505772534,- 0.05246061005530508,- 0.014780208397127464,0,0,0,0],[- 0.03488545227502907,0.13106074735806542,- 0.07028558525517249,- 0.6348388105572,0,0.7872256472114556,- 0.2344880880533387,0.06486518548312036,- 0.008653643911901097,0,0,0],[- 0.058418504934713185,0.14478476223520576,0.06731523668262357,- 0.3961963634560296,- 0.2541245800150513,0,0.5750141813903311,- 0.10537842745121846,0.029797181295285025,- 0.002793485746432971,0,0],[0.0066467104043362955,- 0.0029889365097445072,- 0.06099278971401961,0.10216678579709781,0.10481488864997797,- 0.7962204141365735,0,0.8257971744177006,- 0.21661535522787204,0.04126006766245181,- 0.003868131343354858,0],[0.010459594529770367,- 0.030157474178514932,0.013159172853630142,0.026330727879539228,- 0.026522824364777174,0.13347882630163332,- 0.7554040447103724,0,0.7926019635554774,- 0.19815049088886935,0.03774295064549892,- 0.003538401623015524]]
        elif p == 5:
            h_mat[0:bn, 0:bn] = [[0.286997161596120, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 1.58201821604413, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0.0980221226221970, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 1.99404549319728, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0.433886959876543, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0.860634893077601, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 1.56154224537037, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0.500000000000000, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 1.23732369220836, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0.938723082404258, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1.00680613360313]]
            d_mat[0:bn, 0:bn2] = [[-1.74217750872265, -1169.55033626945, 6035.35724592091, -12098.6870156917, 11337.6356882608, -4293.72146946041, 11.7266715863849, 22.5902350297704, -10.3168265816296, 299.075423452895, -132.367438738796, 0, 0, 0, 0, 0], [212.170519561044, 0, -3426.12865960945, 9160.57490328025, -9663.06001377569, 3908.57112251522, -12.6299559068684, -23.2034833487083, 8.93528690309519, -299.936071751056, 134.706352132177, 0, 0, 0, 0, 0], [-17670.8109604396, 55295.6598471540, 0, -190538.468529780, 268221.950778383, -122282.177588877, 500.769095176299, 863.637241175038, -259.934233948397, 10820.5143262205, -4951.13997506426, 0, 0, 0, 0, 0], [1741.32879334455, -7267.73607516301, 9366.37864591784, 0, -8834.38037848207, 5386.01764720616, -31.7722381979164, -50.1423420138685, 10.1905800627605, -602.363570751721, 282.478938077281, 0, 0, 0, 0, 0], [-7499.34790081628, 35232.9947156526, -60595.7020617640, 40600.7970000183, 0, -8787.78470812505, 101.647862655757, 140.534738572324, -13.3778081547284, 1593.04755186785, -772.809389906795, 0, 0, 0, 0, 0], [1431.83350376702, -7184.73160251660, 13927.3444552816, -12479.1178025407, 4430.33999867602, 0, -15.3593015741969, -17.9283480473184, 0, -188.499381105576, 96.1184780598204, 0, 0, 0, 0, 0], [-2.15525482595196, 12.7955682094024, -31.4345960208943, 40.5722538568394, -28.2436688705749, 8.46518940313415, 0, 0, 0, 0, 0, 0.000508248045164192, 0, 0, 0, 0], [-12.9666666666667, 73.4166666666666, -169.311111111111, 199.972222222222, -121.952380952381, 30.8595238095238, 0, 0, 0, 0, 0, -0.0198412698412698, 0.00158730158730159, 0, 0, 0], [2.39298735185658, -11.4244855532086, 20.5922714599616, -16.4229298890622, 4.69113825801475, 0, 0, 0, 0, 0, 0.130287862132259, 0.0481069019357190, -0.00801781698928650, 0.000641425359142920, 0, 0], [-91.4367604707247, 505.478493128763, -1129.88569472851, 1279.54706349324, -736.322108377694, 172.818957735107, 0, 0, 0, 0, 0, -0.253637353292122, 0.0634093383230304, -0.0105682230538384, 0.000845457844307072, 0], [37.7322683462688, -211.667267190054, 482.040418266578, -559.468039174849, 333.045166849252, -82.1636989752422, 0, 0, -0.160118470918023, 0, 0, 0.827699897249355, -0.236485684928387, 0.0591214212320968, -0.00985357020534946, 0.000788285616427957]]
        elif p == 6:
            h_mat[0:bn, 0:bn] = [[0.282197062791571, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 1.61688988530803, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0.0105340357090476, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 2.01497661971391, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0.796722450579149, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0.00499999999999995, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 2.32248471563908, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0.692505229418858, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0.00500000000000013, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 2.40307380213112, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0517821010409987, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1.37335534767430, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.917506988546066, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1.00797176144786]]
            d_mat[0:bn, 0:bn2] = [[-1.77181149602998, -10.4154900824783, 67.7486044266566, -141.176946991894, 139.737547096859, -63.5801157548199, 5.34950665408022, 8.72105833329057, 0.0644958855010946, -13.1450340306679, 1.84028514816063, 19.1534341005091, -16.7857096979684, 4.26017640880077, 0, 0, 0, 0, 0, 0], [1.81782367217306, 0, -39.0308731459922, 110.876979519274, -128.057797113466, 65.5286399567332, -6.19443255054161, -9.44032711842097, -0.0708665038816233, 12.5705314161669, -2.08503583341844, -17.5489500912656, 15.6573611440940, -4.02305335145501, 0, 0, 0, 0, 0, 0], [-1814.92238164808, 5990.92558137925, 0, -23975.6015078385, 38747.5304838345, -23702.7922825174, 2645.69224535018, 3693.38057737477, 28.0476119139028, -4236.81641930428, 850.277457407879, 5450.85595418586, -4973.18287575979, 1296.60555562171, 0, 0, 0, 0, 0, 0], [19.7718025039170, -88.9716857973636, 125.341326523840, 0, -161.964780442718, 141.805031099899, -20.5549005831364, -25.4666168321214, -0.194317616747863, 24.5271129585534, -6.06845348781780, -26.5130427427695, 24.8935677136713, -6.60504329720622, 0, 0, 0, 0, 0, 0], [-49.4946832786847, 259.883924115706, -512.308733684382, 409.622253737098, 0, -177.098841424016, 42.4139580703226, 44.3288207514282, 0.335576223459969, -35.5648871282796, 10.8273469200218, 24.4188874716801, -23.8207215246542, 6.45709975029994, 0, 0, 0, 0, 0, 0], [3588.42438359169, -21190.5190288070, 49937.2120616355, -57146.7644448207, 28219.7245868143, 0, -2334.09713921730, -2020.38400682954, -14.9305555555563, 1468.13621159020, -506.802068401574, 0, 0, 0, 0, 0, 0, 0, 0, 0], [-0.650000000000000, 4.31250000000000, -12.0000000000000, 17.8333333333333, -14.5500000000000, 5.02500000000000, 0, 0, 0, 0.0291666666666667, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [-3.55384615384615, 22.0416666666667, -56.1818181818182, 74.1000000000000, -51.0000000000000, 14.5875000000000, 0, 0, 0, 0, 0, 0, 0, 0.00649766899766900, 0, 0, 0, 0, 0, 0], [-3.64010989010998, 22.9166666666672, -59.0909090909104, 78.3090909090924, -53.4722222222232, 14.9305555555558, 0, 0, 0, 0, 0, 0, 0, 0.0830031080031064, -0.0360750360750351, 0, 0, 0, 0, 0], [1.54364380755183, -8.45798621820190, 18.5723698598230, -20.5659764243356, 11.7912916375207, -3.05470479160523, -0.0281885381461860, 0, 0, 0, 0, -0.0521909537960611, 0.410806921700496, -0.160071107080501, 0.00108086676118692, -7.50601917490916e-5, 0, 0, 0, 0], [-10.0290071872268, 65.1049934588374, -172.971990685375, 236.139354138852, -166.590196186910, 48.9360279143855, 0, 0, 0, 0, 0, -2.72490407788802, 2.43389738319846, 0, -0.344851647541385, 0.0501602396423833, -0.00348334997516550, 0, 0, 0], [-3.93564772197431, 20.6608726200352, -41.8096535346844, 38.8997365719116, -14.1660902983336, 0, 0, 0, 0, 0.0913228422548757, 0.102741987736221, 0, 0, 0.110170975360350, 0.0577891799813353, -0.0130025654958004, 0.00189128225393461, -0.000131339045412126, 0, 0], [5.16277045599946, -27.5924098459655, 57.0978604576015, -54.6698363614636, 20.6848600224402, 0, 0, 0, 0, -1.07595839987766, -0.137363880377546, 0, 0, 0.752345263473177, -0.291940166343152, 0.0865007900276005, -0.0194626777562101, 0.00283093494635784, -0.000196592704608183, 0], [-1.19270133898459, 6.45338939126485, -13.5504681240765, 13.2037506655458, -5.10382982287453, 0, 0, -0.00446408315393200, -0.000411733300364892, 0.381620496342816, 0, -0.150107278751833, -0.684822793095554, 0, 0.850363958521662, -0.265738737038019, 0.0787374035668205, -0.0177159158025346, 0.00257686048036867, -0.000178948644470047]]

        # construct interior operator for the D1 matrix
        d_int = np.zeros((1, 2*p + 1))
        k = p
        for i in range(0, p):
            d_int[0, 2*p-i] = (-1)**(k+1)*factorial(p)**2/(k*factorial(p+k)*factorial(p-k))
            d_int[0, i] = -1*d_int[0, 2*p-i]
            k = k-1

        # values at the right boundary
        for i in range(n - bn, n):
            h_mat[i, i] = h_mat[n - i - 1, n - i - 1]

        for i in range(0, bn2):
            for j in range(0, bn2):
                d_mat[n - 1 - i, n - 1 - j] = -d_mat[i, j]

        # interior operator
        for i in range(bn, n - bn):
            d_mat[i, (i-p):(i+p+1)] = d_int[0, 0:(2*p+1)]

        d_mat_ref = (1/dx_ref)*d_mat
        d_mat = (1/dx)*d_mat
        h_mat_ref = dx_ref * h_mat
        h_mat = dx*h_mat
        q_mat = h_mat @ d_mat

        # ================================================================================================================#
        #                                    Second derivative operator: CSBP
        # ================================================================================================================#
        db_mat = np.zeros((n, n))
        e_mat = np.zeros((n, n))
        txL = np.zeros((n, 1))
        txL[0, 0] = 1
        txR = np.zeros((n, 1))
        txR[n - 1, 0] = 1
        e_mat[0, 0] = -1
        e_mat[n - 1, n - 1] = 1
        if p == 1:
            if app == 2:
                d2_mat = np.zeros((n, n))
                c2_mat = np.eye(n, n)
                d2_mat[0:bn, 0:bn2] = [[1, -2, 1], [1, -2, 1]]
                db_mat[0:bn, 0:bn2] = [[-3/2, 2, -1/2]]
                d2_int = [1, -2, 1]
                c2_mat[1, 1] = 0
                c2_mat[n - 2, n - 2] = 0
                a1 = -1/4

                # values at the right boundary
                for i in range(0, bn2):
                    for j in range(0, bn2):
                        d2_mat[n - 1 - i, n - 1 - j] = d2_mat[i, j]
                        db_mat[n - 1 - i, n - 1 - j] = -db_mat[i, j]

                # interior operator
                for i in range(bn, n - bn):
                    d2_mat[i, (i - p):(i + p + 1)] = d2_int

                d2_mat = (1/(dx**2))*d2_mat
                db_mat = 1/dx*db_mat

                d2p1 = np.linalg.inv(h_mat)@(-d_mat.transpose()@h_mat @ np.diag(b) @d_mat
                                             + a1*(dx**3)*d2_mat.transpose()@ np.diag(b) @ c2_mat @ d2_mat + e_mat @ db_mat)
                d2p = d2p1
            elif app == 1:
                d2p1 = d_mat @ np.diag(b) @d_mat
                db_mat = d_mat
                d2p = d2p1

        elif p == 2:
            if app == 2:
                F1=[[4.06246151749238,- 9.53704330180342,9.17753727104423,- 4.58202600076536,0.87907051403217],[0.705882352941177,- 0.867647058823529,0.117647058823529,0.0441176470588235,0],[- 0.131326949384405,0.161422708618331,- 0.0218878248974008,- 0.00820793433652531,0],[- 0.0432172869147659,0.0531212484993998,- 0.00720288115246098,- 0.00270108043217287,0],[0,0,0,0,0]]
                F1 = np.asarray(F1)
                F2=[[- 0.867647058823529,0,0.867647058823529],[0,0,0],[0.343023255813954,0,- 0.343023255813954]]
                F2 = np.asarray(F2)
                F3=[[- 0.0218878248974008,0.161422708618331,0,- 0.161422708618331,0.0218878248974008],[0.0465116279069767,- 0.343023255813954,0,0.343023255813954,- 0.0465116279069767],[0,0,0,0,0],[- 0.0560037968675842,0.413028001898434,0,- 0.413028001898434,0.0560037968675842],[0.00775193798449612,- 0.0571705426356589,0,0.0571705426356589,- 0.00775193798449612]]
                F3 = np.asarray(F3)
                F4=[[- 0.240670503920599,0.631006610597514,- 0.389289698025942,- 0.0791125891247956,0.0936556436580049,- 0.0155894631841818],[0.18181546407047,- 0.495032054069813,0.363067966819421,0.0628337832559131,- 0.143820571043189,0.0311354109671972],[- 0.153905229452117,0.498163024240601,- 0.804830992591717,- 0.0645026405891499,0.634325797623723,- 0.10924995923134],[- 0.0274472247983985,0.0756570043285484,- 0.0566043580680295,- 0.00965670378321709,0.0237345884483215,- 0.00568330612722482],[0.0331697071288767,- 0.176779451907253,0.568250193704585,0.0242290590409949,- 0.54527276054445,0.0964032525772464],[- 0.00552126821106439,0.0382706093138465,- 0.0978697551447422,- 0.00580170833820867,0.0964032525772464,- 0.0254811301970777]]
                F4 = np.asarray(F4)
                F5=[[- 0.0465116279069767,0.186046511627907,- 0.13953488372093,0,0],[0.163265306122449,- 0.816326530612245,0.489795918367347,0.163265306122449,0],[- 0.125,0.5,- 0.75,0.5,- 0.125],[0,0.166666666666667,0.5,- 0.833333333333333,0.166666666666667],[0,0,- 0.125,0.166666666666667,- 0.0416666666666667]]
                F5 = np.asarray(F5)
                F6=[[- 0.0408163265306122,0.163265306122449,- 0.122448979591837,0,0],[0.166666666666667,- 0.833333333333333,0.5,0.166666666666667,0],[- 0.125,0.5,- 0.75,0.5,- 0.125],[0,0.166666666666667,0.5,- 0.833333333333333,0.166666666666667],[0,0,- 0.125,0.166666666666667,- 0.0416666666666667]]
                F6 = np.asarray(F6)
                Fint=[[- 1.0 / 24.0,1.0 / 6.0,- 1.0 / 8.0,0,0],[1.0 / 6.0,- 5.0 / 6.0,1.0 / 2.0,1.0 / 6.0,0],[- 1.0 / 8.0,1.0 / 2.0,- 3.0 / 4.0,1.0 / 2.0,- 1.0 / 8.0],[0,1.0 / 6.0,1.0 / 2.0,- 5.0 / 6.0,1.0 / 6.0],[0,0,- 1.0 / 8.0,1.0 / 6.0,- 1.0 / 24.0]]
                Fint = np.asarray(Fint)

                FN = np.fliplr(np.flipud(F1))
                FNm1 = np.fliplr(np.flipud(F2))
                FNm2 = np.fliplr(np.flipud(F3))
                FNm3 = np.fliplr(np.flipud(F4))
                FNm4 = np.fliplr(np.flipud(F5))
                FNm5 = np.fliplr(np.flipud(F6))

                D2 = np.zeros((n, n))
                D2[0:5, 0:5] = D2[0:5, 0:5] + np.dot(b[0] / dx ** 2, F1)
                D2[0:3, 0:3] = D2[0:3, 0:3] + np.dot(b[1] / dx ** 2, F2)
                D2[0:5, 0:5] = D2[0:5, 0:5] + np.dot(b[2] / dx ** 2, F3)
                D2[0:6, 0:6] = D2[0:6, 0:6] + np.dot(b[3] / dx ** 2, F4)
                D2[2:7, 2:7] = D2[2:7, 2:7] + np.dot(b[4] / dx ** 2, F5)
                D2[3:8, 3:8] = D2[3:8, 3:8] + np.dot(b[5] / dx ** 2, F6)
                D2[n - 5:n, n - 5:n] = D2[n - 5:n, n - 5:n] + np.dot(b[n - 1] / dx ** 2, FN)
                D2[n - 3:n, n - 3:n] = D2[n - 3:n, n - 3:n] + np.dot(b[n - 2] / dx ** 2, FNm1)
                D2[n - 5:n, n - 5:n] = D2[n - 5:n, n - 5:n] + np.dot(b[n - 3] / dx ** 2, FNm2)
                D2[n - 6:n, n - 6:n] = D2[n - 6:n, n - 6:n] + np.dot(b[n - 4] / dx ** 2, FNm3)
                D2[n - 7:n - 2, n - 7:n - 2] = D2[n - 7:n - 2, n - 7:n - 2] + np.dot(b[n - 5] / dx ** 2, FNm4)
                D2[n - 8:n - 3, n - 8:n - 3] = D2[n - 8:n - 3, n - 8:n - 3] + np.dot(b[n - 6] / dx ** 2, FNm5)

                # interior of the operator
                for i in range(6, n - 6):
                    D2[i-2:i+3, i-2:i+3] = D2[i-2:i+3, i-2:i+3] + np.dot(b[i] / dx ** 2, Fint)

                d2p = D2
                # upper portion of db_mat
                db_mat[0, 0:5] = 1 / dx * np.asarray([- 252525932147.0 / 117745777728.0, 124968006275.0 / 29436444432.0, - 66095117411.0 / 19624296288.0, 46470821123.0 / 29436444432.0, - 36658672979.0 / 117745777728.0])
                db_mat[n - 1, n - 5:n] = - np.flip(db_mat[0, 0:5])

            elif app == 1:
                d2p = d_mat @ np.diag(b) @d_mat
                db_mat = d_mat

        elif p == 3:
            if app == 2:
                F1=[[5.844999077289128e+100 / 1.1997852865320048e+100,- 4.000049512718262e+100 / 2.999463216330012e+99,4.0848650231337755e+101 / 2.3995705730640096e+100,- 1.5177766031121587e+101 / 1.1997852865320048e+100,2.302828285203689e+100 / 4.799141146128019e+99,- 4.2421545140296067e+99 / 5.998926432660024e+99,2.4437888807988108e+67 / 3.2524975132524547e+71,- 1.9473560647137064e+69 / 1.1871615923371459e+73,7.041021079661327e+68 / 7.914410615580973e+72],[5.1189295851721e+21 / 6.961083458889765e+21,- 2.1859855965046932e+45 / 2.300529748202461e+45,6.265666810466705e+42 / 7.189155463132691e+43,6.793981848053708e+43 / 3.834216247004102e+44,- 7.809172383581617e+42 / 2.8756621852530763e+44,- 5.140783552342403e+43 / 2.300529748202461e+45,0,0,0],[- 1.0402580812706269e+21 / 6.961083458889765e+21,2.776446159872244e+43 / 1.4378310926265381e+44,- 6.366478016241368e+41 / 3.5945777315663453e+43,- 8.629116697947077e+41 / 2.3963851543775636e+43,1.9837044407651942e+41 / 3.5945777315663453e+43,6.529369990112289e+41 / 1.4378310926265381e+44,0,0,0],[- 5.733620886016791e+24 / 3.730444625619025e+25,8.16161039406692e+47 / 4.1095129735389965e+48,- 2.3393535368134526e+45 / 1.2842228042309364e+47,- 2.53660559140185e+46 / 6.8491882892316605e+47,2.9156378064343404e+45 / 5.136891216923746e+47,1.9193663737553332e+46 / 4.1095129735389965e+48,0,0,0],[1.7574312043566758e+24 / 5.4832454405674675e+25,- 9.381158784396596e+46 / 2.2651591033238482e+48,1.0755645477828882e+45 / 2.8314488791548103e+47,2.9156378064343404e+45 / 3.775265172206414e+47,- 3.351306898922045e+44 / 2.8314488791548103e+47,- 2.2061676370535467e+45 / 2.2651591033238482e+48,0,0,0],[7.23073856770407e+24 / 3.0490241658283058e+26,- 6.175623281428928e+47 / 2.0153100700203198e+49,1.7701122043194415e+45 / 6.2978439688134995e+47,1.9193663737553332e+46 / 3.358850116700533e+48,- 2.2061676370535467e+45 / 2.5191375875253998e+48,- 1.4523216731800864e+46 / 2.0153100700203198e+49,0,0,0]]
                F1 = np.asarray(F1)
                F2=[[- 2.1859855965046932e+45 / 2.300529748202461e+45,0,1.4744203551326783e+44 / 2.300529748202461e+44,1.2142942107053847e+43 / 2.875662185253076e+43,- 9.369007639918743e+42 / 1.5336864988016408e+44,- 1.491687657418895e+43 / 2.8756621852530763e+44],[0,0,0,0,0,0],[5.438658631990699e+40 / 1.6854932582624815e+41,0,- 3.6683082470657606e+39 / 1.6854932582624816e+40,- 3.0211231498455087e+38 / 2.106866572828102e+39,2.330977585374107e+38 / 1.1236621721749877e+40,3.71126871431691e+38 / 2.1068665728281019e+40],[1.2142942107053847e+43 / 1.1290697963785799e+44,0,- 8.190264859231174e+41 / 1.1290697963785798e+43,- 1.3490577728511099e+41 / 2.8226744909464496e+42,5.204394647155409e+40 / 7.527131975857199e+42,8.2861830813556895e+40 / 1.4113372454732248e+43],[- 9.369007639918743e+42 / 4.425543465111189e+44,0,6.3192802339492045e+41 / 4.4255434651111893e+43,5.204394647155409e+40 / 5.5319293313889867e+42,- 4.015502402998899e+40 / 2.950362310074126e+43,- 6.393286891311919e+40 / 5.531929331388986e+43],[- 1.491687657418895e+43 / 9.22828627564437e+44,0,1.0061249484513144e+42 / 9.228286275644369e+43,1.6572366162711379e+41 / 2.307071568911092e+43,- 6.393286891311919e+40 / 6.15219085042958e+43,- 1.017907927139946e+41 / 1.1535357844555463e+44]]
                F2 = np.asarray(F2)
                F3=[[- 6.366478016241368e+41 / 3.5945777315663453e+43,1.8726787310909923e+42 / 1.437831092626538e+43,0,- 9.737471460241883e+41 / 7.18915546313269e+42,1.8718200909073485e+41 / 7.18915546313269e+42,- 7.481556095738435e+40 / 2.3963851543775636e+43],[1.5588768260143114e+38 / 5.2671664320702547e+39,- 3.6683082470657606e+39 / 1.6854932582624816e+40,0,1.907430584335352e+39 / 8.427466291312408e+39,- 9.166565736156125e+37 / 2.106866572828102e+39,1.4655292160494396e+38 / 2.8091554304374693e+40],[0,0,0,0,0,0],[- 9.737471460241883e+41 / 2.8226744909464497e+43,2.2913963609620584e+43 / 9.032558371028639e+43,0,- 1.1914700743128163e+43 / 4.516279185514319e+43,5.72586433736824e+41 / 1.1290697963785798e+43,- 9.154378766357431e+41 / 1.5054263951714397e+44],[1.8718200909073485e+41 / 2.0744734992708698e+43,- 1.1011795418844353e+42 / 1.6595787994166959e+43,0,5.72586433736824e+41 / 8.297893997083479e+42,- 5.5033732053832015e+40 / 4.1489469985417397e+42,4.399332558921261e+40 / 2.765964665694493e+43],[- 7.481556095738435e+40 / 7.690238563036974e+43,1.7605402472401918e+42 / 2.460876340171832e+44,0,- 9.154378766357431e+41 / 1.230438170085916e+44,4.399332558921261e+40 / 3.07609542521479e+43,- 7.033550603129433e+40 / 4.1014605669530534e+44]]
                F3 = np.asarray(F3)
                F4=[[- 2.53660559140185e+46 / 6.8491882892316605e+47,4.5336969591176704e+45 / 5.136891216923745e+46,2.8624163302881065e+46 / 2.054756486769498e+47,0,- 8.612340561385607e+46 / 4.109512973538996e+47,1.5516485531263963e+45 / 6.421114021154682e+46,- 9.556034810027986e+23 / 1.8652223128095125e+26],[3.773992307598161e+41 / 1.8817829939642996e+43,- 1.3490577728511099e+41 / 2.8226744909464496e+42,- 4.2587374435615585e+41 / 5.645348981892899e+42,0,1.2813543871092012e+42 / 1.1290697963785798e+43,- 1.8468491036822412e+41 / 1.4113372454732248e+43,3.791355606503513e+19 / 1.3665633473584236e+22],[1.0558525748019575e+43 / 1.5054263951714397e+44,- 1.8871343751200667e+42 / 1.1290697963785798e+43,- 1.1914700743128163e+43 / 4.516279185514319e+43,0,3.5848544951700204e+43 / 9.032558371028639e+43,- 6.458678974608849e+41 / 1.4113372454732248e+43,1.3258878969682598e+20 / 1.3665633473584236e+22],[0,0,0,0,0,0,0],[- 8.612340561385607e+46 / 1.185824371476543e+48,1.5392910252342835e+46 / 8.893682786074074e+46,9.718540536405924e+46 / 3.5574731144296294e+47,0,- 2.9240813075830412e+47 / 7.114946228859259e+47,5.2681921921178675e+45 / 1.1117103482592591e+47,- 1.0814955030110927e+24 / 1.0764419487142303e+26],[1.5516485531263963e+45 / 2.060599422965757e+47,- 2.2186198282534765e+45 / 1.2363596537794544e+47,- 3.501895740032918e+45 / 1.2363596537794544e+47,0,5.2681921921178675e+45 / 1.2363596537794544e+47,- 3.037272475412216e+45 / 6.181798268897272e+47,6.23514937152883e+23 / 5.985684117764632e+26],[- 1.5926724683379976e+23 / 9.83925610098065e+25,2.8465971813079193e+22 / 7.379442075735487e+24,1.7972410443404763e+23 / 2.951776830294195e+25,0,- 5.4074775150554636e+23 / 5.90355366058839e+25,9.742420893013796e+21 / 9.22430259466936e+24,- 6.0 / 26795.0]]
                F4 = np.asarray(F4)
                F5=[[- 3.351306898922045e+44 / 2.8314488791548103e+47,4.020710313134666e+44 / 1.5101060688825654e+47,3.1622874130275793e+44 / 5.66289775830962e+46,- 9.899239293557884e+45 / 2.265159103323848e+47,0,1.0235334540738097e+47 / 2.2651591033238482e+48,- 2.636146806535014e+24 / 2.7416227202837338e+26,2.9290520072611267e+23 / 2.7416227202837338e+26],[3.346966047727184e+40 / 5.531929331388986e+43,- 4.015502402998899e+40 / 2.950362310074126e+43,- 1.5790956966613122e+40 / 5.5319293313889867e+42,9.886417094334805e+41 / 4.4255434651111893e+43,0,- 1.0222077007032289e+43 / 4.425543465111189e+44,9.872746055951075e+19 / 2.008661968117616e+22,- 1.096971783994564e+19 / 2.008661968117616e+22],[5.832326471832496e+40 / 2.0744734992708698e+43,- 6.997298636662613e+40 / 1.1063858662777973e+43,- 5.5033732053832015e+40 / 4.1489469985417397e+42,1.7227785196692325e+42 / 1.6595787994166959e+43,0,- 1.7812696476472981e+43 / 1.6595787994166959e+44,4.587723317233709e+20 / 2.008661968117616e+22,- 5.097470352481899e+19 / 2.008661968117616e+22],[- 9.899239293557884e+45 / 8.893682786074073e+47,1.1876552855424402e+46 / 4.743297485906173e+47,4.670452566823289e+45 / 8.893682786074074e+46,- 2.9240813075830412e+47 / 7.114946228859259e+47,0,3.023358615738095e+48 / 7.114946228859258e+48,- 9.733459527099835e+24 / 1.0764419487142303e+26,1.0814955030110927e+24 / 1.0764419487142303e+26],[0,0,0,0,0,0,0,0],[1.0235334540738097e+47 / 7.26912109932507e+48,- 1.2279781108547888e+47 / 3.8768645863067036e+48,- 4.829022014771825e+46 / 7.26912109932507e+47,3.023358615738095e+48 / 5.815296879460056e+48,0,- 3.1260065496992616e+49 / 5.815296879460056e+49,1.0063926282036056e+26 / 8.79814028655197e+26,- 1.1182140313373397e+25 / 8.79814028655197e+26],[- 1.8306575045382042e+22 / 6.025985904352848e+24,2.1963203401877826e+22 / 3.2138591489881853e+24,8.637026328486518e+21 / 6.025985904352847e+23,- 5.4074775150554636e+23 / 4.8207887234822777e+24,0,5.591070156686699e+24 / 4.820788723482278e+25,- 972.0 / 39385.0,108.0 / 39385.0],[1.8306575045382042e+22 / 5.423387313917563e+25,- 2.1963203401877826e+22 / 2.892473234089367e+25,- 8.637026328486518e+21 / 5.423387313917563e+24,5.4074775150554636e+23 / 4.33870985113405e+25,0,- 5.591070156686699e+24 / 4.33870985113405e+26,108.0 / 39385.0,- 12.0 / 39385.0]]
                F5 = np.asarray(F5)
                F6=[[- 3.330503150979137e+198 / 1.552005266502184e+199,7.878559625907614e+198 / 9.70003291563865e+198,- 1.404232776251001e+199 / 1.2933377220851533e+199,2.1130202192398975e+194 / 4.5251133213466364e+194,2.3009065940462252e+195 / 9.851499723893513e+195,- 6.961259800013429e+196 / 1.7963023917849352e+197,1.8031637378541286e+172 / 8.601641791316925e+172,- 2.2542919161439996e+168 / 8.025416860717415e+169,- 2.5587326382680607e+145 / 3.995404397604193e+147],[6.558361463337729e+194 / 3.553385931437706e+195,- 1.3175318181047692e+195 / 1.776692965718853e+195,6.447886120658126e+194 / 5.92230988572951e+194,- 9.614181927441626e+190 / 1.6576721083400384e+191,- 8.250404494720859e+190 / 4.511090429653048e+191,8.330678578923603e+193 / 1.97410329524317e+194,- 7.2980993712906776e+168 / 3.151015382561699e+169,2.1174315428286075e+164 / 5.879857030344652e+165,1.3835008706611495e+141 / 2.9272506393173074e+143],[- 5.179759410737738e+195 / 9.475695817167216e+195,2.857191293525122e+195 / 1.184461977145902e+195,- 6.321693970943474e+195 / 1.579282636194536e+195,1.4457605841694745e+191 / 5.525573694466794e+190,5.2380079247983066e+191 / 1.2029574479074794e+192,- 3.347381563810267e+194 / 1.97410329524317e+194,3.025782222169195e+169 / 3.151015382561699e+169,- 9.968588890141771e+164 / 5.879857030344652e+165,- 2.8365120517634227e+141 / 2.9272506393173074e+143],[2.1130202192398975e+194 / 1.776692965718853e+195,- 1.1549516749435625e+195 / 1.776692965718853e+195,3.919456943683445e+194 / 2.961154942864755e+194,- 9.802343281947e+194 / 8.883464828594265e+194,7.937238661104121e+189 / 2.255545214826524e+191,1.3801552715224787e+193 / 2.1934481058257445e+193,- 1.3839396869163213e+169 / 3.151015382561699e+169,2.7654957375360475e+168 / 3.151015382561699e+169,- 3.181958142588499e+144 / 1.5687136176101449e+147],[2.3009065940462252e+195 / 2.8427087451501647e+196,- 9.911210919508169e+194 / 3.553385931437706e+195,1.420023948412821e+195 / 4.737847908583608e+195,7.937238661104121e+189 / 1.6576721083400384e+191,- 1.9443605506268405e+196 / 2.8427087451501647e+196,1.4774373333733283e+193 / 1.97410329524317e+194,1.7734981681003846e+169 / 3.151015382561699e+169,- 2.7725175854799736e+146 / 2.305795328590243e+147,3.903581737949905e+145 / 2.305795328590243e+147],[- 6.961259800013429e+196 / 5.764513228996406e+197,1.0007644176860924e+198 / 1.7293539686989218e+198,- 9.074751419489634e+197 / 8.646769843494609e+197,1.3801552715224787e+193 / 1.79278261771363e+193,1.4774373333733283e+193 / 2.1954474656581462e+194,- 3.2463888487661544e+196 / 6.917415874795687e+196,7.644581731760854e+172 / 2.760352495431699e+173,- 1.342636541873138e+169 / 2.5754361778612606e+170,- 1.3775629914172772e+145 / 1.2821650525273736e+148],[2.003515264282365e+170 / 3.024974767259231e+171,- 4.383603387365746e+172 / 1.3612386452666537e+173,8.202895604300688e+172 / 1.3612386452666537e+173,- 1.1532830724302678e+168 / 2.1167485309240745e+168,4.433745420250962e+168 / 8.640590613600697e+168,3.822290865880427e+172 / 1.3612386452666537e+173,- 8.64468624259004e+152 / 1.1862486879278508e+153,8.051045408187774e+148 / 5.533908788616583e+149,- 1.183951951580266e+143 / 9.367202045815384e+144],[- 7.044662237949999e+166 / 7.93780699096528e+168,4.7105009488889e+166 / 9.407771248551442e+167,- 1.3512422240587171e+168 / 1.2700491185544447e+169,1.3827478687680237e+168 / 1.2700491185544447e+169,- 2.3104313212333116e+145 / 2.107620460308461e+146,- 6.71318270936569e+168 / 1.2700491185544448e+170,8.051045408187774e+148 / 5.533908788616583e+149,- 2.712674707915572e+147 / 9.223181314360972e+148,1.9179625037183242e+143 / 7.025401534361537e+145],[- 3.553795330927862e+142 / 1.7563503835903843e+145,2.3083327721183874e+143 / 3.5127007671807686e+145,- 5.126522781553759e+143 / 8.430481841233845e+145,- 1.7677545236602772e+143 / 7.025401534361537e+145,4.337313042166561e+143 / 2.8101606137446147e+145,- 1.1479691595143976e+143 / 1.0538102301542305e+146,- 1.183951951580266e+143 / 9.367202045815384e+144,1.9179625037183242e+143 / 7.025401534361537e+145,- 1.0863330780680774e+142 / 2.8101606137446147e+145]]
                F6 = np.asarray(F6)
                F7=[[- 24.0 / 5359.0,108.0 / 5359.0,- 216.0 / 5359.0,132.0 / 5359.0,0,0,0],[216.0 / 7877.0,- 1080.0 / 7877.0,2592.0 / 7877.0,- 1512.0 / 7877.0,- 216.0 / 7877.0,0,0],[- 2160.0 / 43801.0,12960.0 / 43801.0,- 41040.0 / 43801.0,18360.0 / 43801.0,12960.0 / 43801.0,- 1080.0 / 43801.0,0],[11.0 / 360.0,- 7.0 / 40.0,17.0 / 40.0,- 101.0 / 180.0,17.0 / 40.0,- 7.0 / 40.0,11.0 / 360.0],[0,- 1.0 / 40.0,3.0 / 10.0,17.0 / 40.0,- 19.0 / 20.0,3.0 / 10.0,- 1.0 / 20.0],[0,0,- 1.0 / 40.0,- 7.0 / 40.0,3.0 / 10.0,- 1.0 / 8.0,1.0 / 40.0],[0,0,0,11.0 / 360.0,- 1.0 / 20.0,1.0 / 40.0,- 1.0 / 180.0]]
                F7 = np.asarray(F7)
                F8=[[- 48.0 / 7877.0,216.0 / 7877.0,- 432.0 / 7877.0,264.0 / 7877.0,0,0,0],[1080.0 / 43801.0,- 5400.0 / 43801.0,12960.0 / 43801.0,- 7560.0 / 43801.0,- 1080.0 / 43801.0,0,0],[- 1.0 / 20.0,3.0 / 10.0,- 19.0 / 20.0,17.0 / 40.0,3.0 / 10.0,- 1.0 / 40.0,0],[11.0 / 360.0,- 7.0 / 40.0,17.0 / 40.0,- 101.0 / 180.0,17.0 / 40.0,- 7.0 / 40.0,11.0 / 360.0],[0,- 1.0 / 40.0,3.0 / 10.0,17.0 / 40.0,- 19.0 / 20.0,3.0 / 10.0,- 1.0 / 20.0],[0,0,- 1.0 / 40.0,- 7.0 / 40.0,3.0 / 10.0,- 1.0 / 8.0,1.0 / 40.0],[0,0,0,11.0 / 360.0,- 1.0 / 20.0,1.0 / 40.0,- 1.0 / 180.0]]
                F8 = np.asarray(F8)
                F9=[[- 240.0 / 43801.0,1080.0 / 43801.0,- 2160.0 / 43801.0,1320.0 / 43801.0,0,0,0],[1.0 / 40.0,- 1.0 / 8.0,3.0 / 10.0,- 7.0 / 40.0,- 1.0 / 40.0,0,0],[- 1.0 / 20.0,3.0 / 10.0,- 19.0 / 20.0,17.0 / 40.0,3.0 / 10.0,- 1.0 / 40.0,0],[11.0 / 360.0,- 7.0 / 40.0,17.0 / 40.0,- 101.0 / 180.0,17.0 / 40.0,- 7.0 / 40.0,11.0 / 360.0],[0,- 1.0 / 40.0,3.0 / 10.0,17.0 / 40.0,- 19.0 / 20.0,3.0 / 10.0,- 1.0 / 20.0],[0,0,- 1.0 / 40.0,- 7.0 / 40.0,3.0 / 10.0,- 1.0 / 8.0,1.0 / 40.0],[0,0,0,11.0 / 360.0,- 1.0 / 20.0,1.0 / 40.0,- 1.0 / 180.0]]
                F9 = np.asarray(F9)
                Fint=[[- 1.0 / 180.0,1.0 / 40.0,- 1.0 / 20.0,11.0 / 360.0,0,0,0],[1.0 / 40.0,- 1.0 / 8.0,3.0 / 10.0,- 7.0 / 40.0,- 1.0 / 40.0,0,0],[- 1.0 / 20.0,3.0 / 10.0,- 19.0 / 20.0,17.0 / 40.0,3.0 / 10.0,- 1.0 / 40.0,0],[11.0 / 360.0,- 7.0 / 40.0,17.0 / 40.0,- 101.0 / 180.0,17.0 / 40.0,- 7.0 / 40.0,11.0 / 360.0],[0,- 1.0 / 40.0,3.0 / 10.0,17.0 / 40.0,- 19.0 / 20.0,3.0 / 10.0,- 1.0 / 20.0],[0,0,- 1.0 / 40.0,- 7.0 / 40.0,3.0 / 10.0,- 1.0 / 8.0,1.0 / 40.0],[0,0,0,11.0 / 360.0,- 1.0 / 20.0,1.0 / 40.0,- 1.0 / 180.0]]
                Fint = np.asarray(Fint)

                FN = np.fliplr(np.flipud(F1))
                FNm1 = np.fliplr(np.flipud(F2))
                FNm2 = np.fliplr(np.flipud(F3))
                FNm3 = np.fliplr(np.flipud(F4))
                FNm4 = np.fliplr(np.flipud(F5))
                FNm5 = np.fliplr(np.flipud(F6))
                FNm6 = np.fliplr(np.flipud(F7))
                FNm7 = np.fliplr(np.flipud(F8))
                FNm8 = np.fliplr(np.flipud(F9))

                D2 = np.zeros((n, n))
                D2[0:6, 0:9] = np.dot(b[0] / dx ** 2, F1)
                D2[0:6, 0:6] = D2[0:6, 0:6] + np.dot(b[1] / dx ** 2, F2)
                D2[0:6, 0:6] = D2[0:6, 0:6] + np.dot(b[2] / dx ** 2, F3)
                D2[0:7, 0:7] = D2[0:7, 0:7] + np.dot(b[3] / dx ** 2, F4)
                D2[0:8, 0:8] = D2[0:8, 0:8] + np.dot(b[4] / dx ** 2, F5)
                D2[0:9, 0:9] = D2[0:9, 0:9] + np.dot(b[5] / dx ** 2, F6)
                D2[3:10, 3:10] = D2[3:10, 3:10] + np.dot(b[6] / dx ** 2, F7)
                D2[4:11, 4:11] = D2[4:11, 4:11] + np.dot(b[7] / dx ** 2, F8)
                D2[5:12, 5:12] = D2[5:12, 5:12] + np.dot(b[8] / dx ** 2, F9)
                D2[n - 6:n, n - 9:n] = D2[n - 6:n, n - 9:n] + np.dot(b[n - 1] / dx ** 2, FN)
                D2[n - 6:n, n - 6:n] = D2[n - 6:n, n - 6:n] + np.dot(b[n - 2] / dx ** 2, FNm1)
                D2[n - 6:n, n - 6:n] = D2[n - 6:n, n - 6:n] + np.dot(b[n - 3] / dx ** 2, FNm2)
                D2[n - 7:n, n - 7:n] = D2[n - 7:n, n - 7:n] + np.dot(b[n - 4] / dx ** 2, FNm3)
                D2[n - 8:n, n - 8:n] = D2[n - 8:n, n - 8:n] + np.dot(b[n - 5] / dx ** 2, FNm4)
                D2[n - 9:n, n - 9:n] = D2[n - 9:n, n - 9:n] + np.dot(b[n - 6] / dx ** 2, FNm5)
                D2[n - 10:n - 3, n - 10:n - 3] = D2[n - 10:n - 3, n - 10:n - 3] + np.dot(b[n - 7] / dx ** 2, FNm6)
                D2[n - 11:n - 4, n - 11:n - 4] = D2[n - 11:n - 4, n - 11:n - 4] + np.dot(b[n - 8] / dx ** 2, FNm7)
                D2[n - 12:n - 5, n - 12:n - 5] = D2[n - 12:n - 5, n - 12:n - 5] + np.dot(b[n - 9] / dx ** 2, FNm8)

                # interior of the operator
                for i in range(9, n - 9):
                    D2[i-3:i+4, i-3:i+4] = D2[i-3:i+4, i-3:i+4] + np.dot(b[i] / dx ** 2, Fint)

                d2p = D2
                # upper portion of db_mat
                db_mat[0, 0:9] = 1/dx *np.asarray([- 6.483812845270432e+96 / 2.7821824770560037e+96,3.641811197925308e+96 / 6.955456192640009e+95,- 3.0449769513616686e+97 / 5.5643649541120075e+96,1.0589595513592362e+97 / 2.7821824770560037e+96,- 1.6546585782748327e+96 / 1.1128729908224013e+96,3.442519001149234e+95 / 1.3910912385280019e+96,- 2.4437888807988108e+67 / 1.0294372669976264e+72,1.9473560647137064e+69 / 3.7574460245413365e+73,- 7.041021079661327e+68 / 2.504964016360891e+73])
                # lower portion of db_mat
                db_mat[n - 1, n - 9:n] = - np.flip(db_mat[0, 0:9])

            elif app == 1:
                d2p = d_mat @ np.diag(b) @ d_mat
                db_mat = d_mat

        elif p == 4:
            if app == 2:
                F1=[[5.592204337824584,- 17.466581885307917,27.67204196948284,- 27.015432573841277,15.182990761870093,- 4.593325923281218,0.6888045604103621,- 0.06070124715747036],[0.7409168913040093,- 0.9879501720555531,0.03730370857494691,0.31700035878025096,- 0.02133471263211527,- 0.11067395719826395,0.009093833638890995,0.01564404958783416],[- 0.1657920615421988,0.22106972812805387,- 0.008347304293366675,- 0.07093392472035018,0.004773984816925229,0.024765076540014308,- 0.0020348914217086025,- 0.0035006075073691274],[- 0.20172144705350878,0.26897853276506983,- 0.010156278204100318,- 0.08630626705930473,0.0058085719938799525,0.03013200408736732,- 0.0024758799568901668,- 0.004259236572513106],[0.059149805492639776,- 0.07887127584668381,0.002978076397311969,0.02530716978249488,- 0.001703219507129833,- 0.008835462004188522,0.0007259903198807207,0.0012489153656748259],[0.09905112242252624,- 0.13207631596494138,0.004987029244762089,0.0423788979763505,- 0.0028521785068954214,- 0.014795694108332378,0.0012157293748163264,0.00209140956171402],[- 0.011269787316583364,0.015027310686428368,- 0.000567411631039412,- 0.0048217643094172445,0.0003245136892495387,0.0016834168227881723,- 0.00013832262728187891,- 0.00023795531414417973],[- 0.017734698609903017,0.023647724527065664,- 0.0008929072023772854,- 0.007587768463888513,0.0005106709037143632,0.002649108554431868,- 0.00021767137540957385,- 0.00037445833363350536]]
                F1 = np.asarray(F1)
                F2=[[- 0.9879501720555531,0,0.26693410389782424,1.026268325239208,- 0.08015213218938426,- 0.27429497890245275,0.004089375002571394,0.0451054790077865],[0,0,0,0,0,0,0,0],[0.30575062634945294,0,- 0.08261071435513694,- 0.3176093209150711,0.02480546622018338,0.08488875651435086,- 0.001265578977341068,- 0.01395923483643803],[0.16830802196625022,0,- 0.04547511837454291,- 0.17483593475999187,0.013654784630589759,0.04672912322925351,- 0.0006966693637281116,- 0.007684207327830584],[- 0.05727078988160473,0,0.015473985843596886,0.05949206678574888,- 0.004646363805605686,- 0.015900690689305573,0.0002370582476159372,0.002614733499554284],[- 0.06326789571385949,0,0.017094342939119843,0.06572177343780086,- 0.005132907391524088,- 0.017565730146013717,0.0002618817816077089,0.0028885350928688817],[0.0013061023858758,0,- 0.00035289560124998127,- 0.0013567602355438618,0.00010596373587118589,0.00036262691835241734,- 5.406287279131135e-06,- 5.963091602642898e-05],[0.013178181887815714,0,- 0.0035606109222164513,- 0.013689304418629944,0.0010691423581518037,0.003658796997190905,- 5.454781943025196e-05,- 0.000601658082881775]]
                F2 = np.asarray(F2)
                F3=[[- 0.008347304293366675,0.05973079558660115,0,- 0.05603286214152096,- 0.0096184023704654,0.028536625348721555,- 0.01867295203566621,0.0044040999056965385],[0.011544744446186632,- 0.08261071435513694,0,0.0774962851811121,0.013302737440141021,- 0.03946759761344309,0.025825638042089427,- 0.006091093140949154],[0,0,0,0,0,0,0,0],[- 0.00918939029902224,0.0657565094341388,0,- 0.06168552405582283,- 0.010588718265067404,0.03141543412461467,- 0.020556701691948374,0.004848390753107381],[- 0.006872599469395158,0.049178251999419866,0,- 0.04613362650844397,- 0.007919134693606394,0.023495105645759535,- 0.015374031632504613,0.0036260346587707317],[0.006582155618789018,- 0.04709992327672949,0,0.04418396711315883,0.007584463077120917,- 0.02250217582574879,0.014724307613729774,- 0.0034727943203202534],[- 0.005963940012787375,0.04267615858662766,0,- 0.04003407768689765,- 0.006872107777584252,0.020388704636346837,- 0.013341356908585055,0.0031466191628798344],[0.0012867179528092804,- 0.009207366152679553,0,0.008637338131075051,0.001482654827529901,- 0.004398855829177265,0.002878393044246826,- 0.0006788819738042423]]
                F3 = np.asarray(F3)
                F4=[[- 0.08630626705930473,0.27941100285631154,0.06817594237381766,0,- 0.10570328590150231,- 0.20435631580094224,0.03805682538085303,0.010722098150767044],[0.05400444765132908,- 0.17483593475999187,- 0.04265975387948292,0,0.06614175035653708,0.12787194180588354,- 0.02381330932368802,- 0.006709141850586902],[0.07808982358708966,- 0.25281079421901426,- 0.06168552405582283,0,0.09564022671670065,0.1849013888972586,- 0.034433777308818185,- 0.009701343617393662],[0,0,0,0,0,0,0,0],[- 0.0755277559224047,0.2445162645172088,0.059661668970706475,0,- 0.09250234368587626,- 0.17883491508686922,0.03330403128861496,0.00938304991861994],[- 0.04713609460988547,0.152600082409174,0.03723423314835529,0,- 0.0577297600115799,- 0.11160902868272478,0.02078470292859669,0.005855864818064173],[0.012154940644361477,- 0.03935084056834819,- 0.009601556887609846,0,0.014886719236320104,0.028780515870927677,- 0.0053597319103054295,- 0.0015100463853457882],[0.003132607451645255,- 0.010141615660632262,- 0.002474541796094676,0,0.0038366495546714296,0.007417400143478755,- 0.0013813260477608573,- 0.00038917364530764395]]
                F4 = np.asarray(F4)
                F5=[[- 0.001703219507129833,0.006398805432115778,- 0.003431567374642758,- 0.030994863919195745,0,0.03843487733146615,- 0.011448459449898063,0.0031669260979461785,- 0.00042249861066171265],[0.001236758572343855,- 0.004646363805605686,0.002491763597938533,0.022506296745798442,0,- 0.027908712774654593,0.008313068459773771,- 0.002299599660066509,0.00030678886447218844],[- 0.0039305725976437255,0.014766722189267929,- 0.007919134693606394,- 0.071527810877286,0,0.0886973610861439,- 0.02641996572410939,0.007308413793549362,- 0.0009750131763156726],[- 0.005083158184909391,0.019096857492381093,- 0.010241310479632561,- 0.09250234368587626,0,0.1147066249978887,- 0.034167252144392306,0.009451504194492037,- 0.0012609221899513045],[0,0,0,0,0,0,0,0,0],[0.00886525090802688,- 0.033305757378827114,0.017861294834082792,0.16132814611010315,0,- 0.2000533869746881,0.05958918689508707,- 0.016483838018496365,0.0021991036247116717],[- 0.0036565147957112933,0.013737117640718522,- 0.007366975792219438,- 0.06654055923923738,0,0.08251296855487557,- 0.024577842839056927,0.006798837193673428,- 0.0009070307230424733],[0.0009252607235764126,- 0.003476101183294403,0.0018641722330985124,0.016837718272352666,0,- 0.020879447576437477,0.006219286375071108,- 0.0017204079219574956,0.0002295190775906761],[- 0.0001245909009822467,0.0004680740977073765,- 0.0002510199473399018,- 0.0022672814662757146,0,0.0028115201686123416,- 0.0008374574573333526,0.00023166137672542985,- 3.090587111393249e-05]]
                F5 = np.asarray(F5)
                F6=[[- 0.01825598717860156,0.06089178578196561,- 0.05561717912273737,0.020765337522146477,- 0.18547256107388635,0.07266615447565279,0.12141217768451254,- 0.023228972256321787,0.007546752184573428,- 0.0007075080173037589],[0.011769140170006817,- 0.05033712958627735,0.09014730793794032,- 0.11578924270934493,0.19468816843162892,- 0.09831419832079089,- 0.036991079597585685,0.008103204603140237,- 0.0036150851627226857,0.0003389142340052518],[- 0.06370481367594662,0.5342321613219063,- 1.7703948592225023,3.045595219346958,- 2.8282055623492792,1.7478926833967536,- 0.7748469639559005,0.11845894593346495,- 0.009960618808777015,0.0009338080133228452],[0.003405515690060299,- 0.09824853427225355,0.43606655724621995,- 0.8067819751754041,0.6235857231964388,- 0.4171037678956076,0.30101682887274994,- 0.04954732366965992,0.00839390455995162,- 0.0007869285524954645],[- 0.13252498447536618,0.7197333519900434,- 1.7642729407345599,2.716879430520886,- 3.2288287561400724,1.8172652214992304,- 0.15308916273230805,0.0035798383666000937,0.023457105330257834,- 0.0021991036247116717],[0.016760914478597826,- 0.11732640135018478,0.35197920405055433,- 0.5866320067509239,0.5866320067509239,- 0.35197920405055433,0.11732640135018478,- 0.016760914478597826,0,0],[0.03877774350564708,- 0.06112674454061286,- 0.21605928205004404,0.5862288266252044,- 0.06843001569297309,0.16246151642090403,- 0.5119918684479803,0.09164071783297975,- 0.023725124031034404,0.002224230377909475],[- 0.006786661580691541,0.012248896883485263,0.03021556852270639,- 0.0882678418092414,0.0014637655553506885,- 0.021230409738093144,0.08382902128480693,- 0.01507676070599061,0.0039772927863916275,- 0.0003728711987242151],[0.0022254668546557404,- 0.0055156099899126,- 0.0025643899688618504,0.015093194798324936,0.009680936381525763,0,- 0.02190530214820309,0.004014416283855941,- 0.001135130716010858,0.00010641850462601794],[- 0.00020863751762397568,0.0005170884365543063,0.00024041155958079845,- 0.0014149870123429627,- 0.0009075877857680403,0,0.0020536220763940397,- 0.0003763515266114945,0.00010641850462601794,- 9.976734808689182e-06]]
                F6 = np.asarray(F6)
                F7=[[- 0.0035986156975510593,0.024284253321910868,- 0.07139685245927635,0.11898409618975327,- 0.12329152757566769,0.0892360503909291,- 0.024222051491884264,- 0.01372511562346409,0.004507914926633346,- 0.0008586504622158754,8.04984808327383e-05],[0.0046936508364675,- 0.03277680572754276,0.09820387662540707,- 0.16367220137423924,0.16404658282728393,- 0.09975437487934183,0.03277139944026363,- 0.0031879544891440918,- 0.0003918065290496987,7.462981505708547e-05,- 6.996545161601763e-06],[- 0.08177910592930106,0.581977104584181,- 1.7612340403053386,2.9355020901350932,- 2.890227617442786,1.5737301180721552,- 0.5826308944655845,0.2638650709401307,- 0.047381711502707397,0.009025087905277599,- 0.0008461019911197749],[0.0195133937028327,- 0.1388777878658181,0.42030348685297997,- 0.7005326784029847,0.6896742934912226,- 0.3753335592315153,0.13903458929853585,- 0.06318390773740487,0.011363773682600786,- 0.002164528320495388,0.0002029245300464426],[- 0.08809501353356802,0.6064559438405597,- 1.8029631388541507,3.0048184749012674,- 3.053353212004441,2.0039694240791532,- 0.6057550738330768,- 0.10710316143004514,0.0507937204903785,- 0.009674994379119716,0.0009070307230424733],[0.020582867220685856,- 0.11904508223056319,0.31690748500243476,- 0.5278846560505244,0.6469020541455097,- 0.8098172336915667,0.11732640135018478,0.4580841717636448,- 0.12455690116293062,0.023725124031034404,- 0.002224230377909475],[- 0.007736262686709716,0.05415383880696801,- 0.16246151642090403,0.27076919403484007,- 0.27076919403484007,0.16246151642090403,- 0.05415383880696801,0.007736262686709716,0,0,0],[- 0.004009980031164003,- 0.004818948517187544,0.06730460978623276,- 0.11256121945634116,- 0.04379357460190542,0.5802377115816423,0.007076803246031048,- 0.6248214975578181,0.16363211548550866,- 0.031168021997239743,0.002922002062241226],[0.0013293420808672591,- 0.0005977873019489014,- 0.012198557942803922,0.020433357159419564,0.020962977729995592,- 0.15924408282731473,0,0.16515943488354012,- 0.04332307104557441,0.008252013532490363,- 0.0007736262686709716],[- 0.0002532080154032874,0.00011386424799026695,0.002323534846248366,- 0.0038920680303656313,- 0.00399294813904678,0.03033220625282185,0,- 0.031458939977817166,0.008252013532490363,- 0.0015718121014267358,0.0001473573845087565],[2.3738251444058197e-05,- 1.0674773249087527e-05,- 0.00021783139183578431,0.0003648813778467779,0.0003743388880356356,- 0.0028436443362020486,0,0.0029492756229203597,- 0.0007736262686709716,0.0001473573845087565,- 1.381475479769592e-05]]
                F7 = np.asarray(F7)
                F8=[[- 0.06988623675471825,0.2372422401494946,- 0.21344321032911248,- 0.05470139637023506,0.05437044174591675,0.20678362072925924,- 0.20411559629541373,0.05497245372515476,- 0.007568274238722074,- 0.0007690165531390131,- 0.0056370638290173134,0.0027520380205325852],[0.04585408594459011,- 0.16378654067983714,0.1816125781757518,- 0.05131741607791187,0.058627616537260265,- 0.18740387613304332,0.1447327316344912,- 0.03377627660705459,0.004215801251555411,- 1.1338066371607697e-05,0.0023927018872612242,- 0.0011400678666915358],[- 0.24448129442892103,1.0762748481504167,- 1.9986492006985632,2.4045481925766974,- 2.568372002205102,2.207721673763687,- 1.0171830852053567,0.14312446001471807,- 0.02025776122544412,0.01253424082165586,0.010989402457856326,- 0.006249474021644127],[- 0.008971029890959695,- 0.04354343110223407,0.3442818157215165,- 0.7609997438098302,0.7817618147153449,- 0.37528454681667284,0.056506800364734676,0.010896467479574392,0.0011659144711613275,- 0.003235225016517491,- 0.0054151300247804865,0.0028362939086628387],[0.038849099330795354,0.2167376236032947,- 1.60218524620492,3.4060314644145953,- 3.3149262558567503,1.492209942607536,- 0.2806869591193443,0.02560358532402007,0.02877533432540493,- 0.009909504612647288,- 0.0024284177255406115,0.0019293339135562342],[0.04769596805592879,- 0.2236444253354196,0.4445765606080478,- 0.5278157229612364,0.48170080116503816,- 0.39684094135591796,0.3058142748431484,- 0.060333071475795585,- 0.10213411812233995,0.030784784785238946,0.0047375068718817645,- 0.004541617078574343],[- 0.0651923257584023,0.2391668696759001,- 0.2836325846601964,0.11004672196638723,- 0.12546553050875156,0.4234601101067416,- 0.8822899094457141,0.05329068126825282,0.6726033829460797,- 0.16953714936505854,0.029018223344642005,- 0.001468489569880522],[0.016060953346367594,- 0.051056606556319384,0.03650705225149533,0.019411899503980156,0.010469088951179909,- 0.07642159560114627,0.048748043009223675,- 0.0007831707614795942,0.0007427749444864989,- 0.002128870495524496,- 0.003295252436141196,0.0017456838438777722],[- 0.0022318135077563717,0.006432134915751856,- 0.005215418908748083,0.002096446785371281,0.011875812340836588,- 0.13057689950469845,0.6210117304366752,0.000749707902468005,- 0.633477703901644,0.1574372357785816,- 0.031772337679580945,0.003671105342743274],[- 0.00022677581134714504,- 1.729872169828291e-05,0.003226976360347189,- 0.005817302429632811,- 0.004089732402050822,0.039357873970781,- 0.15653290062166755,- 0.0021487410765168896,0.1574372357785816,- 0.03860955262088006,0.008810901645829625,- 0.0013906840717458427],[- 0.0016623175641967767,0.0036505946162334164,0.0028292532791115476,- 0.009737019492957053,- 0.0010022275629381651,0.006056829687132866,0.02679239734793114,- 0.003326009863875941,- 0.031772337679580945,0.008810901645829625,1.9538851422566865e-05,- 0.0006596032641122845],[0.0008115503527420845,- 0.001739425056854338,- 0.0016089450665098429,0.005099978938645139,0.0007962516522345653,- 0.005806387598583569,- 0.001355849928861895,0.0017619778139806083,0.003671105342743274,- 0.0013906840717458427,- 0.0006596032641122845,0.00042003088632210106]]
                F8 = np.asarray(F8)
                F9=[[- 0.0021634109779752743,0.011538191882534797,- 0.025960931735703293,0.03461457564760439,- 0.01802842481646062,0,0,0,0],[0.003724647661910628,- 0.02110633675082689,0.05214506726674879,- 0.08194224856203382,0.04345422272229066,0.003724647661910628,0,0,0],[- 0.011604394030064573,0.07220511840929068,- 0.20501096119780746,0.40228565970890523,- 0.199853452740001,- 0.06189010149367773,0.003868131343354858,0,0],[0.014153606492062097,- 0.10379311427512204,0.3679937687936145,- 0.9765988479522846,0.3538401623015524,0.3963009817777387,- 0.05661442596824839,0.004717868830687365,0],[- 0.00744047619047619,0.05555555555555555,- 0.18452380952380953,0.35714285714285715,- 0.44146825396825395,0.35714285714285715,- 0.18452380952380953,0.05555555555555555,- 0.00744047619047619],[0,0.004761904761904762,- 0.05714285714285714,0.4,0.35714285714285715,- 0.9857142857142858,0.37142857142857144,- 0.10476190476190476,0.014285714285714285],[0,0,0.0035714285714285713,- 0.05714285714285714,- 0.18452380952380953,0.37142857142857144,- 0.18928571428571428,0.06666666666666667,- 0.010714285714285714],[0,0,0,0.004761904761904762,0.05555555555555555,- 0.10476190476190476,0.06666666666666667,- 0.026984126984126985,0.004761904761904762],[0,0,0,0,- 0.00744047619047619,0.014285714285714285,- 0.010714285714285714,0.004761904761904762,- 0.0008928571428571428]]
                F9 = np.asarray(F9)
                F10=[[- 0.0006983714366082428,0.003724647661910628,- 0.008380457239298913,0.011173942985731884,- 0.005819761971735356,0,0,0,0],[0.005157508457806477,- 0.02922588126090337,0.07220511840929068,- 0.1134651860717425,0.060170932007742234,0.005157508457806477,0,0,0],[- 0.010615204869046572,0.06605016362962311,- 0.18753528601982278,0.3679937687936145,- 0.1828174171891354,- 0.05661442596824839,0.003538401623015524,0,0],[0.014285714285714285,- 0.10476190476190476,0.37142857142857144,- 0.9857142857142858,0.35714285714285715,0.4,- 0.05714285714285714,0.004761904761904762,0],[- 0.00744047619047619,0.05555555555555555,- 0.18452380952380953,0.35714285714285715,- 0.44146825396825395,0.35714285714285715,- 0.18452380952380953,0.05555555555555555,- 0.00744047619047619],[0,0.004761904761904762,- 0.05714285714285714,0.4,0.35714285714285715,- 0.9857142857142858,0.37142857142857144,- 0.10476190476190476,0.014285714285714285],[0,0,0.0035714285714285713,- 0.05714285714285714,- 0.18452380952380953,0.37142857142857144,- 0.18928571428571428,0.06666666666666667,- 0.010714285714285714],[0,0,0,0.004761904761904762,0.05555555555555555,- 0.10476190476190476,0.06666666666666667,- 0.026984126984126985,0.004761904761904762],[0,0,0,0,- 0.00744047619047619,0.014285714285714285,- 0.010714285714285714,0.004761904761904762,- 0.0008928571428571428]]
                F10 = np.asarray(F10)
                F11=[[- 0.0009670328358387145,0.005157508457806477,- 0.011604394030064573,0.015472525373419432,- 0.00805860696532262,0,0,0,0],[0.004717868830687365,- 0.026734590040561737,0.06605016362962311,- 0.10379311427512204,0.05504180302468593,0.004717868830687365,0,0,0],[- 0.010714285714285714,0.06666666666666667,- 0.18928571428571428,0.37142857142857144,- 0.18452380952380953,- 0.05714285714285714,0.0035714285714285713,0,0],[0.014285714285714285,- 0.10476190476190476,0.37142857142857144,- 0.9857142857142858,0.35714285714285715,0.4,- 0.05714285714285714,0.004761904761904762,0],[- 0.00744047619047619,0.05555555555555555,- 0.18452380952380953,0.35714285714285715,- 0.44146825396825395,0.35714285714285715,- 0.18452380952380953,0.05555555555555555,- 0.00744047619047619],[0,0.004761904761904762,- 0.05714285714285714,0.4,0.35714285714285715,- 0.9857142857142858,0.37142857142857144,- 0.10476190476190476,0.014285714285714285],[0,0,0.0035714285714285713,- 0.05714285714285714,- 0.18452380952380953,0.37142857142857144,- 0.18928571428571428,0.06666666666666667,- 0.010714285714285714],[0,0,0,0.004761904761904762,0.05555555555555555,- 0.10476190476190476,0.06666666666666667,- 0.026984126984126985,0.004761904761904762],[0,0,0,0,- 0.00744047619047619,0.014285714285714285,- 0.010714285714285714,0.004761904761904762,- 0.0008928571428571428]]
                F11 = np.asarray(F11)
                F12=[[- 0.000884600405753881,0.004717868830687365,- 0.010615204869046572,0.014153606492062097,- 0.007371670047949008,0,0,0,0],[0.004761904761904762,- 0.026984126984126985,0.06666666666666667,- 0.10476190476190476,0.05555555555555555,0.004761904761904762,0,0,0],[- 0.010714285714285714,0.06666666666666667,- 0.18928571428571428,0.37142857142857144,- 0.18452380952380953,- 0.05714285714285714,0.0035714285714285713,0,0],[0.014285714285714285,- 0.10476190476190476,0.37142857142857144,- 0.9857142857142858,0.35714285714285715,0.4,- 0.05714285714285714,0.004761904761904762,0],[- 0.00744047619047619,0.05555555555555555,- 0.18452380952380953,0.35714285714285715,- 0.44146825396825395,0.35714285714285715,- 0.18452380952380953,0.05555555555555555,- 0.00744047619047619],[0,0.004761904761904762,- 0.05714285714285714,0.4,0.35714285714285715,- 0.9857142857142858,0.37142857142857144,- 0.10476190476190476,0.014285714285714285],[0,0,0.0035714285714285713,- 0.05714285714285714,- 0.18452380952380953,0.37142857142857144,- 0.18928571428571428,0.06666666666666667,- 0.010714285714285714],[0,0,0,0.004761904761904762,0.05555555555555555,- 0.10476190476190476,0.06666666666666667,- 0.026984126984126985,0.004761904761904762],[0,0,0,0,- 0.00744047619047619,0.014285714285714285,- 0.010714285714285714,0.004761904761904762,- 0.0008928571428571428]]
                F2 = np.asarray(F2)
                Fint=[[- 1.0 / 1120.0,1.0 / 210.0,- 3.0 / 280.0,1.0 / 70.0,- 5.0 / 672.0,0,0,0,0],[1.0 / 210.0,- 17.0 / 630.0,1.0 / 15.0,- 11.0 / 105.0,1.0 / 18.0,1.0 / 210.0,0,0,0],[- 3.0 / 280.0,1.0 / 15.0,- 53.0 / 280.0,13.0 / 35.0,- 31.0 / 168.0,- 2.0 / 35.0,1.0 / 280.0,0,0],[1.0 / 70.0,- 11.0 / 105.0,13.0 / 35.0,- 69.0 / 70.0,5.0 / 14.0,2.0 / 5.0,- 2.0 / 35.0,1.0 / 210.0,0],[- 5.0 / 672.0,1.0 / 18.0,- 31.0 / 168.0,5.0 / 14.0,- 445.0 / 1008.0,5.0 / 14.0,- 31.0 / 168.0,1.0 / 18.0,- 5.0 / 672.0],[0,1.0 / 210.0,- 2.0 / 35.0,2.0 / 5.0,5.0 / 14.0,- 69.0 / 70.0,13.0 / 35.0,- 11.0 / 105.0,1.0 / 70.0],[0,0,1.0 / 280.0,- 2.0 / 35.0,- 31.0 / 168.0,13.0 / 35.0,- 53.0 / 280.0,1.0 / 15.0,- 3.0 / 280.0],[0,0,0,1.0 / 210.0,1.0 / 18.0,- 11.0 / 105.0,1.0 / 15.0,- 17.0 / 630.0,1.0 / 210.0],[0,0,0,0,- 5.0 / 672.0,1.0 / 70.0,- 3.0 / 280.0,1.0 / 210.0,- 1.0 / 1120.0]]
                Fint = np.asarray(Fint)

                FN = np.fliplr(np.flipud(F1))
                FNm1 = np.fliplr(np.flipud(F2))
                FNm2 = np.fliplr(np.flipud(F3))
                FNm3 = np.fliplr(np.flipud(F4))
                FNm4 = np.fliplr(np.flipud(F5))
                FNm5 = np.fliplr(np.flipud(F6))
                FNm6 = np.fliplr(np.flipud(F7))
                FNm7 = np.fliplr(np.flipud(F8))
                FNm8 = np.fliplr(np.flipud(F9))
                FNm9 = np.fliplr(np.flipud(F10))
                FNm10 = np.fliplr(np.flipud(F11))
                FNm11 = np.fliplr(np.flipud(F12))

                D2 = np.zeros((n, n))
                D2[0:8, 0:8] = np.dot(b[0] / dx ** 2, F1)
                D2[0:8, 0:8] = D2[0:8, 0:8] + np.dot(b[1] / dx ** 2, F2)
                D2[0:8, 0:8] = D2[0:8, 0:8] + np.dot(b[2] / dx ** 2, F3)
                D2[0:8, 0:8] = D2[0:8, 0:8] + np.dot(b[3] / dx ** 2, F4)
                D2[0:9, 0:9] = D2[0:9, 0:9] + np.dot(b[4] / dx ** 2, F5)
                D2[0:10, 0:10] = D2[0:10, 0:10] + np.dot(b[5] / dx ** 2, F6)
                D2[0:11, 0:11] = D2[0:11, 0:11] + np.dot(b[6] / dx ** 2, F7)
                D2[0:12, 0:12] = D2[0:12, 0:12] + np.dot(b[7] / dx ** 2, F8)
                D2[4:13, 4:13] = D2[4:13, 4:13] + np.dot(b[8] / dx ** 2, F9)
                D2[5:14, 5:14] = D2[5:14, 5:14] + np.dot(b[9] / dx ** 2, F10)
                D2[6:15, 6:15] = D2[6:15, 6:15] + np.dot(b[10] / dx ** 2, F11)
                D2[7:16, 7:16] = D2[7:16, 7:16] + np.dot(b[11] / dx ** 2, F12)
                D2[n - 8:n, n - 8:n] = D2[n - 8:n, n - 8:n] + np.dot(b[n - 1] / dx ** 2, FN)
                D2[n - 8:n, n - 8:n] = D2[n - 8:n, n - 8:n] + np.dot(b[n - 2] / dx ** 2, FNm1)
                D2[n - 8:n, n - 8:n] = D2[n - 8:n, n - 8:n] + np.dot(b[n - 3] / dx ** 2, FNm2)
                D2[n - 8:n, n - 8:n] = D2[n - 8:n, n - 8:n] + np.dot(b[n - 4] / dx ** 2, FNm3)
                D2[n - 9:n, n - 9:n] = D2[n - 9:n, n - 9:n] + np.dot(b[n - 5] / dx ** 2, FNm4)
                D2[n - 10:n, n - 10:n] = D2[n - 10:n, n - 10:n] + np.dot(b[n - 6] / dx ** 2, FNm5)
                D2[n - 11:n, n - 11:n] = D2[n - 11:n, n - 11:n] + np.dot(b[n - 7] / dx ** 2, FNm6)
                D2[n - 12:n, n - 12:n] = D2[n - 12:n, n - 12:n] + np.dot(b[n - 8] / dx ** 2, FNm7)
                D2[n - 13:n - 4, n - 13:n - 4] = D2[n - 13:n - 4, n - 13:n - 4] + np.dot(b[n - 9] / dx ** 2, FNm8)
                D2[n - 14:n - 5, n - 14:n - 5] = D2[n - 14:n - 5, n - 14:n - 5] + np.dot(b[n - 10] / dx ** 2, FNm9)
                D2[n - 15:n - 6, n - 15:n - 6] = D2[n - 15:n - 6, n - 15:n - 6] + np.dot(b[n - 11] / dx ** 2, FNm10)
                D2[n - 16:n - 7, n - 16:n - 7] = D2[n - 16:n - 7, n - 16:n - 7] + np.dot(b[n - 12] / dx ** 2, FNm11)

                for i in range(12, n - 12):
                    D2[i-4:i+5, i-4:i+5] = D2[i-4:i+5, i-4:i+5] + np.dot(b[i] / dx ** 2, Fint)

                d2p = D2

                # upper portion of db_mat
                db_mat[0, 0:7] = 1 / dx * np.asarray([- 2.4968607207219065,6.2811643243314395,- 8.202910810828598,7.603881081104797,- 4.452910810828597,1.4811643243314392,- 0.2135273873885732])
                # lower portion of D1b
                db_mat[n - 1, n - 7:n] = - np.flip(db_mat[0, 0:7])
            elif app == 1:
                d2p = d_mat @ np.diag(b) @ d_mat
                db_mat = d_mat

        elif p == 5:
            if app == 2:
                raise('No order-matched and compatible operaotor is available for degree 5, try applying first derivative twice by using app==1')
            if app == 1:
                d2p = d_mat @ np.diag(b) @ d_mat
                db_mat = d_mat

        elif p == 6:
            if app == 2:
                raise('No order-matched and compatible operaotor is available for degree 6, try applying first derivative twice by using app==1')
            if app == 1:
                d2p = d_mat @ np.diag(b) @ d_mat
                db_mat = d_mat

        d2p_ref = (1/(dx_ref**2))*((dx**2)*d2p)
        db_mat_ref = (1/dx_ref)*(dx*db_mat)

        # oper_test = operator_test_1d(p, x_ref, h_mat_ref, d_mat_ref)
        # oper_test = operator_test_1d(p, x_ref, h_mat_ref, d_mat_ref, der=d2p_ref)

        return {'h_mat': h_mat, 'q_mat': q_mat, 'd_mat': d_mat, 'd2p': d2p, 'db_mat': db_mat, 'tl': txL, 'tr': txR,
                'e_mat': e_mat, 'x': x, 'x_ref': x_ref, 'd_mat_ref': d_mat_ref, 'h_mat_ref': h_mat_ref,
                'd2p_ref': d2p_ref, 'db_mat_ref': db_mat_ref}

    @staticmethod
    def hqd_hgtl(p, xl, xr, n, b, app):
        """Computes hybrid-Gauss-Trapezoidal-Lobatto (HGTL) operators up to degree p = 4 for first derivative twice
            and order-matched and compatible operators
                Inputs: p   - degree of operator
                        xl  - start point of the element
                        xr  - end point of the element
                        n   - number of degrees of freedom in the mesh
                        b   - (n,1) vector for holding entries of the variable coefficient, use np.ones(n,1) for constant
                               coefficient
                        app - 1 for first derivative twice
                              2 for order-matched and compatible operator
                Outputs: h_mat  - the norm matrix
                         q_mat  - h_mat @ d_mat
                         d_mat  - first derivative operator
                         d2p    - second derivative operator
                         db_mat - normal derivative at boundaries (interfaces)
                         txL    - left projection vector
                         txR    - right projection vector
                         e_mat  - the E matrix
                         x      - the nodal locations"""

        if p <= 4:
            bn = 2*p        # size of boundary block
        elif p >= 5:
            sys.exit('Only operators with degrees p <= 5 are supported')

        x = np.linspace(0, n - 1, n)  # 1D mesh
        bn2 = bn + p                # size of the block at boundaries including terms from center-difference
        dx = (xr-xl)/(n - 1)          # mesh size
        dx_ref = (1 -(-1))/(n-1)

        # the H and D1 matrices
        h_mat = np.eye(n)
        d_mat = np.zeros((n, n))

        # the H and D1 matrices obtained from solution of the accuracy equation (see CSBP_Oper.py)
        if p == 1:
            x = dx*x + xl
            x_ref = 2/(xr - xl) * (x - xl) - 1  # map to a reference element [-1, 1]

            h_mat[0:bn, 0:bn] = [[1/2, 0], [0, 1]]
            d_mat[0:bn, 0:bn2] = [[-1, 1, 0], [-1/2, 0, 1/2]]
        elif p == 2:
            x[1] = 12/13
            x[n - 2] = n - 1 - 12 / 13
            x = dx*x + xl
            x_ref = 2/(xr - xl) * (x - xl) - 1  # map to a reference element [-1, 1]

            h_mat[0:bn, 0:bn] = [[553.0 / 1728.0,0,0,0],[0,129623.0 / 108864.0,0,0],[0,0,661.0 / 672.0,0],[0,0,0,1955.0 / 1944.0]]
            d_mat[0:bn, 0:bn2] = [[- 864.0 / 553.0,408811.0 / 209034.0,- 2901.0 / 7742.0,- 278.0 / 14931.0,0,0],[- 41.0 / 78.0,0,15.0 / 26.0,- 2.0 / 39.0,0,0],[967.0 / 7932.0,- 49855.0 / 71388.0,0,11800.0 / 17847.0,- 56.0 / 661.0,0],[139.0 / 23460.0,9971.0 / 164220.0,- 1770.0 / 2737.0,0,1296.0 / 1955.0,- 162.0 / 1955.0]]
        elif p == 3:
            x[1] = 4530911073.0 / 5832340780.0
            x[2] = 3476591521.0 / 1773010470.0
            x[n - 3] = n - 1 - 3476591521.0 / 1773010470.0
            x[n - 2] = n - 1 - 4530911073.0 / 5832340780.0
            x = dx * x + xl
            x_ref = 2 / (xr - xl) * (x - xl) - 1  # map to a reference element [-1, 1]

            h_mat[0:bn, 0:bn] = [[0.23964384800553828,0,0,0,0,0],[0,1.141349597513777,0,0,0,0],[0,0,1.1140964967090707,0,0,0],[0,0,0,1.008454610228187,0,0],[0,0,0,0,0.9955423760348296,0],[0,0,0,0,0,1.0009130715085972]]
            d_mat[0:bn, 0:bn2] = [[- 2.0864295251528624,2.7374848692200393,- 0.7225033337912564,- 0.027920696644146505,0.12300916308384005,- 0.02364047671561377,0,0,0],[- 0.5747769214146581,0,0.6709177149829892,- 0.05431980081625862,- 0.05650144164358034,0.014680448891507774,0,0,0],[0.15541156409522427,- 0.6873297476678649,0,0.5846135429252965,- 0.04359501606941579,- 0.009100343283240081,0,0,0],[0.006634927457255199,0.06147810934657416,- 0.6458554440584836,0,0.6865790480289092,- 0.1253635786231439,0.01652693784888884,0,0],[- 0.029610381125876772,0.06477664761564347,0.04878652666736163,- 0.6954840124722225,0,0.7454615637614953,- 0.15067163750220128,0.01674129305580014,0],[0.00566012670838254,- 0.016740239398002562,0.010129411693491519,0.1263081504437395,- 0.7414615689963884,0,0.7493158210728373,- 0.14986316421456747,0.016651462690507497]]
        elif p == 4:
            x[1] = 4201521473.0 / 6476381109.0
            x[2] = 3666429902.0 / 2010617441.0
            x[3] = 9061125799.0 / 3037910163.0
            x[n - 4] = n - 1 - 9061125799.0 / 3037910163.0
            x[n - 3] = n - 1 - 3666429902.0 / 2010617441.0
            x[n - 2] = n - 1 - 4201521473.0 / 6476381109.0
            x = dx * x + xl
            x_ref = 2/(xr - xl) * (x - xl) - 1  # map to a reference element [-1, 1]

            h_mat[0:bn, 0:bn] = [[0.19035354511472097,0,0,0,0,0,0,0],[0,1.0081446836100132,0,0,0,0,0,0],[0,0,1.2374844574607071,0,0,0,0,0],[0,0,0,1.0659288063102514,0,0,0,0],[0,0,0,0,0.9965199524303897,0,0,0],[0,0,0,0,0,1.0022226837225547,0,0],[0,0,0,0,0,0,0.9992341513638966,0],[0,0,0,0,0,0,0,1.000111719987466]]
            d_mat[0:bn, 0:bn2] = [[- 2.626691295392809,3.489888049469191,- 1.0760932905603076,- 0.014195934495894735,0.45704169099707115,- 0.29809114677672244,0.07411784870004978,- 0.005975921940578181,0,0,0,0],[- 0.6589456583663733,0,0.8203525430067151,- 0.06165611133623007,- 0.2262741108262585,0.17137232518323,- 0.05013742102475079,0.005288433363667539,0,0,0,0],[0.16552787511581663,- 0.6683187412432084,0,0.47401597463952366,0.19250855560052632,- 0.24583665822613268,0.09584309762940983,- 0.013740103515935269,0,0,0,0],[0.0025351097010539005,0.05831372647752189,- 0.5503063597980726,0,0.3870711317200882,0.2259013938895714,- 0.15248528741915388,0.028970285428991063,0,0,0,0],[- 0.08730332587354447,0.22891367233714288,- 0.23905827966901907,- 0.4140311173753168,0,0.5403701743588535,- 0.026319164295077392,0.0010119412333677166,- 0.003583900716406426,0,0,0],[0.056616865171622704,- 0.17238494134821147,0.3035443605197186,- 0.2402607794089721,- 0.5372954226567438,0,0.7352291453003048,- 0.1798964717725696,0.038010752215007736,- 0.003563508020156975,0,0],[- 0.01411940858613927,0.0505845145374859,- 0.11869524626374686,0.16266303566258092,0.026247674096746013,- 0.7374280854473759,0,0.7963505333215897,- 0.20015328712195396,0.038124435642276945,- 0.0035741658414634634,0],[0.001137410855191414,- 0.005330910410962954,0.01700126516374011,- 0.030876812208718768,- 0.00100830698169459,0.18027618427907544,- 0.7956517591472259,0,0.7999106339939963,- 0.19997765849849908,0.03809098257114268,- 0.003571029616044626]]

        # construct interior operator for the D1 matrix
        d_int = np.zeros((1, 2*p + 1))
        k = p
        for i in range(0, p):
            d_int[0, 2*p-i] = (-1)**(k+1)*factorial(p)**2/(k*factorial(p+k)*factorial(p-k))
            d_int[0, i] = -1*d_int[0, 2*p-i]
            k = k-1

        # values at the right boundary
        for i in range(n - bn, n):
            h_mat[i, i] = h_mat[n - i - 1, n - i - 1]

        for i in range(0, bn2):
            for j in range(0, bn2):
                d_mat[n - 1 - i, n - 1 - j] = -d_mat[i, j]

        # interior operator
        for i in range(bn, n - bn):
            d_mat[i, (i-p):(i+p+1)] = d_int[0, 0:(2*p+1)]

        d_mat_ref = (1/dx_ref)*d_mat
        d_mat = (1/dx)*d_mat
        h_mat_ref = dx_ref * h_mat
        h_mat = dx*h_mat
        q_mat = h_mat @ d_mat

        # ================================================================================================================#
        #                                    Second derivative operator: HGTL
        # ================================================================================================================#
        db_mat = np.zeros((n, n))
        e_mat = np.zeros((n, n))
        txL = np.zeros((n, 1))
        txL[0, 0] = 1
        txR = np.zeros((n, 1))
        txR[n - 1, 0] = 1
        e_mat[0, 0] = -1
        e_mat[n - 1, n - 1] = 1
        if p == 1:
            if app == 2:
                d2_mat = np.zeros((n, n))
                c2_mat = np.eye(n, n)
                d2_mat[0:bn, 0:bn2] = [[1, -2, 1], [1, -2, 1]]
                db_mat[0, 0:bn2] = [-3/2, 2, -1/2]
                d2_int = [1, -2, 1]
                c2_mat[1, 1] = 0
                c2_mat[n - 2, n - 2] = 0
                a1 = -1/4

                # values at the right boundary
                for i in range(0, bn2):
                    for j in range(0, bn2):
                        d2_mat[n - 1 - i, n - 1 - j] = d2_mat[i, j]
                        db_mat[n - 1 - i, n - 1 - j] = -db_mat[i, j]

                # interior operator
                for i in range(bn, n - bn):
                    d2_mat[i, (i - p):(i + p + 1)] = d2_int

                d2_mat = (1/(dx**2))*d2_mat
                db_mat = 1/dx*db_mat

                d2p1 = np.linalg.inv(h_mat)@(-d_mat.transpose()@h_mat @ np.diag(b) @d_mat
                                             + a1*(dx**3)*d2_mat.transpose()@ np.diag(b) @ c2_mat @ d2_mat
                                             + e_mat @ np.diag(b) @ db_mat)
                d2p = d2p1
            elif app == 1:
                d2p1 = d_mat @ (np.diag(b) @d_mat)
                db_mat = d_mat
                d2p = d2p1

        elif p == 2:
            if app == 2:
                F1=[[4.47010316009567,- 9.24058697233665,8.1738713577453,- 4.23319307626741,0.829805530763085],[0.821254694672416,- 1.02800421622001,0.196962621465334,0.00978690008225873,0],[- 0.19047254283471,0.238423692891438,- 0.0456812869348126,- 0.0022698631219157,0],[- 0.00925710955818761,0.0115875716967722,- 0.00222014507509113,- 0.000110317063493491,0]]
                F1 = np.asarray(F1)
                F2=[[- 1.02800421622001,0,1.12829731048538,- 0.100293094265367],[0,0,0,0],[0.367090173885434,0,- 0.402903849386452,0.0358136755010179],[- 0.0319155198311209,0,0.0350292290829375,- 0.00311370925181667]]
                F2 = np.asarray(F2)
                F3=[[- 0.0456812869348126,0.261684540978408,0,- 0.24774867784938,0.031745423805785],[0.0703334109158618,- 0.402903849386452,0,0.381447431371788,- 0.0488769929011987],[0,0,0,0,0],[- 0.0788392052209952,0.451629159633772,0,- 0.427577902611855,0.0547879481990784],[0.0101592704656245,- 0.0581972226891541,0,0.0550979623092583,- 0.00706001008572869]]
                F3 = np.asarray(F3)
                F4=[[- 0.267440050351639,0.657616703825869,- 0.458551087942175,- 0.0467142472256747,0.143848275082594,- 0.0287595933889739],[0.176748789524926,- 0.450996211270728,0.368356093041401,0.0331005353719363,- 0.165054384876146,0.0378451782086107],[- 0.149189045337381,0.445895872773254,- 0.754851200325629,- 0.032062611237545,0.595565328813747,- 0.105358344686446],[- 0.0148655248364567,0.0391906347873264,- 0.0313603264207051,- 0.00307485447134117,0.0147811090233659,- 0.00467103808218931],[0.0460347778476126,- 0.196528186827607,0.585816491586141,0.0148647469859467,- 0.54945589115839,0.0992680615662974],[- 0.00920373561580011,0.0450617792377163,- 0.103633728925209,- 0.0046974688532305,0.0992680615662974,- 0.0267949074097738]]
                F4 = np.asarray(F4)
                F5=[[- 0.0423600605143722,0.169440242057489,- 0.127080181543116,0,0],[0.165728900255754,- 0.828644501278772,0.497186700767263,0.165728900255754,0],[- 0.125,0.5,- 0.75,0.5,- 0.125],[0,0.166666666666667,0.5,- 0.833333333333333,0.166666666666667],[0,0,- 0.125,0.166666666666667,- 0.0416666666666667]]
                F5 = np.asarray(F5)
                F6=[[- 0.0414322250639386,0.165728900255754,- 0.124296675191816,0,0],[0.166666666666667,- 0.833333333333333,0.5,0.166666666666667,0],[- 0.125,0.5,- 0.75,0.5,- 0.125],[0,0.166666666666667,0.5,- 0.833333333333333,0.166666666666667],[0,0,- 0.125,0.166666666666667,- 0.0416666666666667]]
                F6 = np.asarray(F6)
                Fint=[[- 1.0 / 24.0,1.0 / 6.0,- 1.0 / 8.0,0,0],[1.0 / 6.0,- 5.0 / 6.0,1.0 / 2.0,1.0 / 6.0,0],[- 1.0 / 8.0,1.0 / 2.0,- 3.0 / 4.0,1.0 / 2.0,- 1.0 / 8.0],[0,1.0 / 6.0,1.0 / 2.0,- 5.0 / 6.0,1.0 / 6.0],[0,0,- 1.0 / 8.0,1.0 / 6.0,- 1.0 / 24.0]]
                Fint = np.asarray(Fint)

                FN = np.fliplr(np.flipud(F1))
                FNm1 = np.fliplr(np.flipud(F2))
                FNm2 = np.fliplr(np.flipud(F3))
                FNm3 = np.fliplr(np.flipud(F4))
                FNm4 = np.fliplr(np.flipud(F5))
                FNm5 = np.fliplr(np.flipud(F6))

                D2 = np.zeros((n, n))
                D2[0:4, 0:5] = D2[0:4, 0:5] + np.dot(b[0] / dx ** 2, F1)
                D2[0:4, 0:4] = D2[0:4, 0:4] + np.dot(b[1] / dx ** 2, F2)
                D2[0:5, 0:5] = D2[0:5, 0:5] + np.dot(b[2] / dx ** 2, F3)
                D2[0:6, 0:6] = D2[0:6, 0:6] + np.dot(b[3] / dx ** 2, F4)
                D2[2:7, 2:7] = D2[2:7, 2:7] + np.dot(b[4] / dx ** 2, F5)
                D2[3:8, 3:8] = D2[3:8, 3:8] + np.dot(b[5] / dx ** 2, F6)
                D2[n - 4:n, n - 5:n] = D2[n - 4:n, n - 5:n] + np.dot(b[n - 1] / dx ** 2, FN)
                D2[n - 4:n, n - 4:n] = D2[n - 4:n, n - 4:n] + np.dot(b[n - 2] / dx ** 2, FNm1)
                D2[n - 5:n, n - 5:n] = D2[n - 5:n, n - 5:n] + np.dot(b[n - 3] / dx ** 2, FNm2)
                D2[n - 6:n, n - 6:n] = D2[n - 6:n, n - 6:n] + np.dot(b[n - 4] / dx ** 2, FNm3)
                D2[n - 7:n - 2, n - 7:n - 2] = D2[n - 7:n - 2, n - 7:n - 2] + np.dot(b[n - 5] / dx ** 2, FNm4)
                D2[n - 8:n - 3, n - 8:n - 3] = D2[n - 8:n - 3, n - 8:n - 3] + np.dot(b[n - 6] / dx ** 2, FNm5)

                # interior of the operator
                for i in range(6, n - 6):
                    D2[i-2:i+3, i-2:i+3] = D2[i-2:i+3, i-2:i+3] + np.dot(b[i] / dx ** 2, Fint)

                d2p = D2
                # upper portion of db_mat
                db_mat[0, 0:5] = 1 / dx * np.asarray([- 2.211729975895053,3.9350594027112664,- 2.8031827331745576,1.3454102846638916,- 0.26555697830554753])
                db_mat[n - 1, n - 5:n] = - np.flip(db_mat[0, 0:5])

            elif app == 1:
                d2p = d_mat @ (np.diag(b) @d_mat)
                db_mat = d_mat

        elif p == 3:
            if app == 2:
                F1=[[6.4711685258435825,- 12.11093589293837,11.844647358419698,- 9.599684085883585,4.078368033386534,- 0.6835639388278589],[1.1992315392160091,- 1.573443125549502,0.4152782419083655,0.016048172060875103,- 0.0707028280631232,0.013588000427375391],[- 0.3242552758784624,0.42543680521249677,- 0.11228537316851309,- 0.0043391991360950885,0.019117046432904104,- 0.003674003462330267],[- 0.013843308544064653,0.018163013522608695,- 0.004793757207330026,- 0.00018525179678994074,0.0008161568736389529,- 0.00015685284806302803],[0.061779973432058356,- 0.0810579703039263,0.021393599078275666,0.0008267424689331666,- 0.003642348200887635,0.0007000035255467393],[- 0.011809455480475618,0.01549451122206543,- 0.0040894604164873165,- 0.0001580346807921804,0.0006962474493466266,- 0.00013380809365694105]]
                F1 = np.asarray(F1)
                F2=[[- 1.573443125549502,0,1.8366270932576159,- 0.14869963283355428,- 0.1546718415884202,0.04018750671386063],[0,0,0,0,0,0],[0.39506127636124916,0,- 0.46114170374515856,0.03733561498840772,0.038835121627752676,- 0.010090309232251026],[- 0.03533619842461761,0,0.04124675264427789,- 0.0033394786542660757,- 0.0034736018076031113,0.0009025262422089084],[- 0.03723212209608171,0,0.04345980040254582,- 0.0035186545960267275,- 0.0036599739751220477,0.000950950264684663],[0.009621903264928282,0,- 0.011231323165176091,0.0009093264697159842,0.0009458476594458063,- 0.0002457542289139815]]
                F2 = np.asarray(F2)
                F3=[[- 0.11228537316851309,0.4965980341039355,0,- 0.42238523374304454,0.031497544446836306,0.0065750283607858276],[0.10426837146470025,- 0.46114170374515856,0,0.3922275823675497,- 0.029248668565939145,- 0.0061055815211522296],[0,0,0,0,0,0],[- 0.10037340474054457,0.4439156593946344,0,- 0.37757583936862077,0.028156078462249264,0.005877506252281661],[0.007581990416148041,- 0.03353243106386923,0,0.02852126420202574,- 0.0021268494140346123,- 0.0004439741402699375],[0.0015742277146499717,- 0.006962245983311447,0,0.005921791257881005,- 0.000441591865551491,- 9.218112366803908e-05]]
                F3 = np.asarray(F3)
                F4=[[- 0.00018525179678994074,- 0.0017165116413213651,0.018032733929527454,0,- 0.01916976532224207,0.0035002384489614107,- 0.00046144361813548845],[- 0.00036040793790842766,- 0.0033394786542660757,0.035082739077353084,0,- 0.03729483713354681,0.006809724620422553,- 0.0008977399720543274],[0.003878868447838291,0.03594093531744951,- 0.37757583936862077,0,0.401383409766458,- 0.07328924585267013,0.009661871689545083],[0,0,0,0,0,0,0],[- 0.0046144859704339665,- 0.042757042167561446,0.4491821357108232,0,- 0.4775047512025046,0.08718836467870106,- 0.01149422104902425],[0.0008380454154542877,0.007765186284343757,- 0.08157680659304713,0,0.08672052968995492,- 0.015834441748897626,0.0020874869521917837],[- 0.00011058212428758664,- 0.001024635155776236,0.010764257400974727,0,- 0.011442984133815155,0.0020893929770523984,- 0.0002754489641481473]]
                F4 = np.asarray(F4)
                F5=[[- 0.003642348200887635,0.007968121210577127,0.006001189815119598,- 0.08555090631239906,0,0.0916986030694722,- 0.018533992029617505,0.0020593324477352786],[0.0016730292212278992,- 0.0036599739751220477,- 0.002756509089488909,0.03929584934474238,0,- 0.04211965304240227,0.008513164733673317,- 0.0009459071926303685],[0.0012908650410041241,- 0.002823938993726862,- 0.0021268494140346123,0.030319636699748315,0,- 0.03249840885131421,0.006568532458113656,- 0.0007298369397904062],[- 0.020329867285177657,0.044474289054452616,0.03349580703591414,- 0.4775047512025046,0,0.5118182907895095,- 0.10344798944121826,0.01149422104902425],[0,0,0,0,0,0,0,0],[0.021954959648173636,- 0.048029394775421175,- 0.0361733346086661,0.5156746670995578,0,- 0.5527311006930995,0.11171722874563722,- 0.012413025416181915],[- 0.004441557168881516,0.009716497142346521,0.007317979000104244,- 0.10432260187083338,0,0.1118192345642243,- 0.02260074562533019,0.002511193958370021],[0.0004935063520979462,- 0.001079610793594058,- 0.0008131087777893605,0.011591400207870375,0,- 0.01242435939602492,0.002511193958370021,- 0.00027902155093000237]]
                F5 = np.asarray(F5)
                F6=[[- 0.22783952962238144,0.5932087168523664,- 0.660052101183517,0.2776698202910158,0.11440714388857573,- 0.12220266481304101,0.052973056330773864,- 0.037629187838819064,0.00946474609502672],[0.12455326561344225,- 0.32576378424602437,0.36609192268886537,- 0.15776701965238513,- 0.06093396539097069,0.06677439983512468,- 0.030107187766141588,0.023505698004086976,- 0.006353329085997477],[- 0.1419782091398718,0.37504728706017426,- 0.43071044710401885,0.19658062763508793,0.05645106528581352,- 0.07607617220362148,0.04630473298140996,- 0.036052571745965656,0.010433687230992085],[0.06598399524842136,- 0.17855768871982586,0.21717366983880965,- 0.1276955513055644,0.07846983603449144,0.03567332919315082,- 0.12643282012469506,0.04613656642035724,- 0.010751336585145203],[0.02753972996105029,- 0.06985835916990607,0.06317353794713763,0.07948759371551281,- 0.5692448494489645,0.012571794142684962,0.5569420098762835,- 0.11475569764967998,0.014144240625881283],[- 0.02925840181923991,0.07614340999780715,- 0.08467887906323808,0.0359421155653393,0.012504336458475197,- 0.01570256688227546,0.009035062753625209,- 0.005228440457433121,0.001243363446939713],[0.01269466705972079,- 0.034362826639157414,0.0515879407956378,- 0.12750176033889984,0.5544593718258489,0.009043312412003932,- 0.571973569573334,0.12159091450276154,- 0.015538050044581678],[- 0.009017603371017806,0.026828218956245067,- 0.04016604387953276,0.04652663310670822,- 0.11424415990169692,- 0.005233214397449199,0.12159091450276154,- 0.03221274399558287,0.005927998979564718],[0.002268168174607596,- 0.007251369595175794,0.011624134391806446,- 0.010842234945404653,0.014081190919898219,0.0012444987266779447,- 0.015538050044581678,0.005927998979564718,- 0.0015143366073927984]]
                F6 = np.asarray(F6)
                F7=[[- 0.005508979282962946,0.024790406773333256,- 0.04958081354666651,0.030299386056296205,0,0,0],[0.025111939583700213,- 0.12555969791850105,0.30134327500440256,- 0.17578357708590148,- 0.025111939583700213,0,0],[- 0.04995438807152249,0.29972632842913494,- 0.9491333733589273,0.42461229860794114,0.29972632842913494,- 0.024977194035761246,0],[0.030555555555555555,- 0.175,0.425,- 0.5611111111111111,0.425,- 0.175,0.030555555555555555],[0,- 0.025,0.3,0.425,- 0.95,0.3,- 0.05],[0,0,- 0.025,- 0.175,0.3,- 0.125,0.025],[0,0,0,0.030555555555555555,- 0.05,0.025,- 0.005555555555555556]]
                F7 = np.asarray(F7)
                F8=[[- 0.005580431018600047,0.025111939583700213,- 0.050223879167400426,0.03069237060230026,0,0,0],[0.024977194035761246,- 0.12488597017880622,0.29972632842913494,- 0.1748403582503287,- 0.024977194035761246,0,0],[- 0.05,0.3,- 0.95,0.425,0.3,- 0.025,0],[0.030555555555555555,- 0.175,0.425,- 0.5611111111111111,0.425,- 0.175,0.030555555555555555],[0,- 0.025,0.3,0.425,- 0.95,0.3,- 0.05],[0,0,- 0.025,- 0.175,0.3,- 0.125,0.025],[0,0,0,0.030555555555555555,- 0.05,0.025,- 0.005555555555555556]]
                F8= np.asarray(F8)
                F9=[[- 0.005550487563502499,0.024977194035761246,- 0.04995438807152249,0.030527681599263744,0,0,0],[0.025,- 0.125,0.3,- 0.175,- 0.025,0,0],[- 0.05,0.3,- 0.95,0.425,0.3,- 0.025,0],[0.030555555555555555,- 0.175,0.425,- 0.5611111111111111,0.425,- 0.175,0.030555555555555555],[0,- 0.025,0.3,0.425,- 0.95,0.3,- 0.05],[0,0,- 0.025,- 0.175,0.3,- 0.125,0.025],[0,0,0,0.030555555555555555,- 0.05,0.025,- 0.005555555555555556]]
                F9 = np.asarray(F9)
                Fint=[[- 1.0 / 180.0,1.0 / 40.0,- 1.0 / 20.0,11.0 / 360.0,0,0,0],[1.0 / 40.0,- 1.0 / 8.0,3.0 / 10.0,- 7.0 / 40.0,- 1.0 / 40.0,0,0],[- 1.0 / 20.0,3.0 / 10.0,- 19.0 / 20.0,17.0 / 40.0,3.0 / 10.0,- 1.0 / 40.0,0],[11.0 / 360.0,- 7.0 / 40.0,17.0 / 40.0,- 101.0 / 180.0,17.0 / 40.0,- 7.0 / 40.0,11.0 / 360.0],[0,- 1.0 / 40.0,3.0 / 10.0,17.0 / 40.0,- 19.0 / 20.0,3.0 / 10.0,- 1.0 / 20.0],[0,0,- 1.0 / 40.0,- 7.0 / 40.0,3.0 / 10.0,- 1.0 / 8.0,1.0 / 40.0],[0,0,0,11.0 / 360.0,- 1.0 / 20.0,1.0 / 40.0,- 1.0 / 180.0]]
                Fint = np.asarray(Fint)

                FN = np.fliplr(np.flipud(F1))
                FNm1 = np.fliplr(np.flipud(F2))
                FNm2 = np.fliplr(np.flipud(F3))
                FNm3 = np.fliplr(np.flipud(F4))
                FNm4 = np.fliplr(np.flipud(F5))
                FNm5 = np.fliplr(np.flipud(F6))
                FNm6 = np.fliplr(np.flipud(F7))
                FNm7 = np.fliplr(np.flipud(F8))
                FNm8 = np.fliplr(np.flipud(F9))

                D2 = np.zeros((n, n))
                D2[0:6, 0:6] = np.dot(b[0] / dx ** 2, F1)
                D2[0:6, 0:6] = D2[0:6, 0:6] + np.dot(b[1] / dx ** 2, F2)
                D2[0:6, 0:6] = D2[0:6, 0:6] + np.dot(b[2] / dx ** 2, F3)
                D2[0:7, 0:7] = D2[0:7, 0:7] + np.dot(b[3] / dx ** 2, F4)
                D2[0:8, 0:8] = D2[0:8, 0:8] + np.dot(b[4] / dx ** 2, F5)
                D2[0:9, 0:9] = D2[0:9, 0:9] + np.dot(b[5] / dx ** 2, F6)
                D2[3:10, 3:10] = D2[3:10, 3:10] + np.dot(b[6] / dx ** 2, F7)
                D2[4:11, 4:11] = D2[4:11, 4:11] + np.dot(b[7] / dx ** 2, F8)
                D2[5:12, 5:12] = D2[5:12, 5:12] + np.dot(b[8] / dx ** 2, F9)
                D2[n - 6:n, n - 6:n] = D2[n - 6:n, n - 6:n] + np.dot(b[n - 1] / dx ** 2, FN)
                D2[n - 6:n, n - 6:n] = D2[n - 6:n, n - 6:n] + np.dot(b[n - 2] / dx ** 2, FNm1)
                D2[n - 6:n, n - 6:n] = D2[n - 6:n, n - 6:n] + np.dot(b[n - 3] / dx ** 2, FNm2)
                D2[n - 7:n, n - 7:n] = D2[n - 7:n, n - 7:n] + np.dot(b[n - 4] / dx ** 2, FNm3)
                D2[n - 8:n, n - 8:n] = D2[n - 8:n, n - 8:n] + np.dot(b[n - 5] / dx ** 2, FNm4)
                D2[n - 9:n, n - 9:n] = D2[n - 9:n, n - 9:n] + np.dot(b[n - 6] / dx ** 2, FNm5)
                D2[n - 10:n - 3, n - 10:n - 3] = D2[n - 10:n - 3, n - 10:n - 3] + np.dot(b[n - 7] / dx ** 2, FNm6)
                D2[n - 11:n - 4, n - 11:n - 4] = D2[n - 11:n - 4, n - 11:n - 4] + np.dot(b[n - 8] / dx ** 2, FNm7)
                D2[n - 12:n - 5, n - 12:n - 5] = D2[n - 12:n - 5, n - 12:n - 5] + np.dot(b[n - 9] / dx ** 2, FNm8)

                # interior of the operator
                for i in range(9, n - 9):
                    D2[i-3:i+4, i-3:i+4] = D2[i-3:i+4, i-3:i+4] + np.dot(b[i] / dx ** 2, Fint)

                d2p = D2
                # upper portion of db_mat
                db_mat[0, 0:6] = 1/dx *np.asarray([- 2.593990489201914,4.271053714942161,- 3.199748538135959,2.286544885656597,- 0.9158512275616086,0.15199165430072362])
                # lower portion of db_mat
                db_mat[n - 1, n - 6:n] = - np.flip(db_mat[0, 0:6])

            elif app == 1:
                d2p = d_mat @ np.diag(b) @ d_mat
                db_mat = d_mat

        elif p == 4:
            if app == 2:
                F1=[[8.16104764327662,- 12.746598476760642,8.837472146467368,- 7.358042445328978,4.220011168606799,- 1.2928778428628445,0.19468470917731678,- 0.015696902575638855],[1.7531414791866966,- 2.3603035375836288,0.8007336937733315,- 0.08565363114275555,- 0.24815647478641853,0.18514029753444108,- 0.04883963490825819,0.003937807926592015],[- 0.46223289710013155,0.6523358019491868,- 0.2909304388024137,0.11459455630445144,0.010404688009897634,- 0.03545109874580712,0.012268570072389582,- 0.000989181687573107],[0.026368485529899063,- 0.08101033794283789,0.1330379491505516,- 0.14078138403158255,0.079686744539184,- 0.017474204495644727,0.0001878968676681149,- 1.5149617237622008e-05],[0.20960791959047118,- 0.2510513015016666,0.012920604034077427,0.08523702552634056,- 0.08676728406673563,0.03600205327527986,- 0.006470734732353702,0.0005217178745869008],[- 0.1445424704250973,0.18623426671800947,- 0.0437728904078226,- 0.018584949475567894,0.035797198510697806,- 0.01898913721548955,0.004196320271343255,- 0.00033833797607320297],[0.0370873278589502,- 0.04927515559215769,0.015193800939009267,0.00020043818928100075,- 0.006453158403159636,0.0042088707239736145,- 0.0010465002023227362,8.43764864259831e-05],[- 0.0029876272752627315,0.003969436660409547,- 0.001223960223635845,- 1.614660952597254e-05,0.0005198441939574225,- 0.00033905211561268593,8.430244853223767e-05,- 6.797078861972191e-06]]
                F1 = np.asarray(F1)
                F2=[[- 2.299646578019886,0,2.8629385363308084,- 0.21517292788731016,- 0.7896713137660942,0.5980702298684247,- 0.17497398713834503,0.018456040612402132],[0,0,0,0,0,0,0,0],[0.4403857328476311,0,- 0.5482569789073323,0.04120593505207918,0.15122322862370977,- 0.1145313366811967,0.03350777823501091,- 0.003534359169902007],[- 0.03842557718777996,0,0.04783781419420265,- 0.0035953976703558266,- 0.01319488668829366,0.009993358980104868,- 0.0029236998906272604,0.0003083882627491846],[- 0.15084167043663832,0,0.18778991315674642,- 0.014113926977079827,- 0.05179723754201258,0.03922946829049543,- 0.011477141207338426,0.001210594715827286],[0.11359230867878717,0,- 0.14141642505228127,0.010628585225882647,0.039006249258239666,- 0.029542008242546488,0.008642936418034732,- 0.0009116462861164425],[- 0.03333244637038821,0,0.04149713531465059,- 0.0031188444988528817,- 0.011445966074929067,0.008668785914042583,- 0.0025361771231489846,0.00026751283862597126],[0.0035127803119925486,0,- 0.004373225964803302,0.00032868321244700386,0.0012062470252847866,- 0.0009135705237278826,0.0002672781039509371,- 2.819216514409132e-05]]
                F2 = np.asarray(F2)
                F3=[[- 0.17812343568824934,0.7191733130662679,0,- 0.5100854100432373,- 0.2071571647284021,0.26454317852324855,- 0.10313611433684229,0.014785633207214571],[0.13579121325659574,- 0.5482569789073323,0,0.3888602104862088,0.15792488295868812,- 0.20167272785653947,0.07862512892959368,- 0.011271728867214567],[0,0,0,0,0,0,0,0],[- 0.09109104239285082,0.36778005373185174,0,- 0.26085400571065015,- 0.10593868236004672,0.13528547659374857,- 0.05274306621692328,0.007561266354870648],[- 0.03957080905158202,0.15976712854419903,0,- 0.11331744350667952,- 0.046020764069932524,0.05876928862726073,- 0.022912086054123586,0.00328468551085788],[0.05024505299367827,- 0.20286438495323494,0,0.14388487601250163,0.058434886344859285,- 0.07462233126515859,0.02909263180554382,- 0.0041707309381894785],[- 0.019647371910573804,0.07932625763351267,0,- 0.056263442924024805,- 0.02284985040644721,0.029179642727913454,- 0.011376120093112937,0.001630884972732641],[0.0028141832975673406,- 0.01136226413928739,0,0.008058871286251322,0.003272888998000245,- 0.0041795342179929305,0.001629453918970665,- 0.00023359914350925146]]
                F3 = np.asarray(F3)
                F4=[[- 3.598824715310859e-05,- 0.0008278178007052726,0.0078121125954218554,0,- 0.005494836110276385,- 0.0032068812149917184,0.002164671027796566,- 0.00041126025009193684],[- 0.00015630499835137478,- 0.0035953976703558266,0.033929750486408276,0,- 0.023865300955165793,- 0.013928201640102339,0.00940164993286663,- 0.001786195155299572],[0.0012016824276054024,0.027641638119642365,- 0.26085400571065015,0,0.183477899554227,0.10708086968166051,- 0.07228046213484361,0.013732378062358485],[0,0,0,0,0,0,0,0],[- 0.0010496142422810118,- 0.024143697522621507,0.22784395715559008,0,- 0.16025949293415112,- 0.09353020674328665,0.06313365391101286,- 0.011994599624262652],[- 0.000609087399233505,- 0.014010501515276537,0.13221703527324466,0,- 0.09299801186158908,- 0.05427524520936188,0.03663623407129017,- 0.006960423359073812],[0.00041236861617900385,0.009485487844764152,- 0.08951450307382956,0,0.06296216521146597,0.036745806575421106,- 0.02480371973710165,0.004712394563100974],[- 7.827610157388238e-05,- 0.0018005419929733,0.016991706109616034,0,- 0.01195152260875475,- 0.006975114921605297,0.004708259574993174,- 0.0008945100597019784]]
                F4 = np.asarray(F4)
                F5=[[- 0.039901259569778504,0.10462309160844376,- 0.1092596001779125,- 0.18922948162264824,0,0.24697169785306894,- 0.012028955396470878,0.0004624993475517005,- 0.0016379920422542739],[0.01975448238421696,- 0.05179723754201258,0.05409269958625375,0.09368452278434837,0,- 0.12227178057140435,0.005955345521475592,- 0.00022897611033918103,0.0008109439474614371],[- 0.016806637126291903,0.044067840330176085,- 0.046020764069932524,- 0.07970453227589241,0,0.10402588166476211,- 0.005066664324300152,0.00019480735167908236,- 0.0006899315502002884],[- 0.033792597069194234,0.0886058740244716,- 0.09253255873531202,- 0.16025949293415112,0,0.20916169471914922,- 0.010187388750607965,0.00039169325141849397,- 0.0013872245057739796],[0,0,0,0,0,0,0,0,0],[0.046907677286699014,- 0.12299426812136774,0.12844491930528126,0.22245702398346118,0,- 0.2903384210611325,0.014141166567611808,- 0.0005437114109724944,0.0019256134504194815],[- 0.002291509253473423,0.006008451490822884,- 0.006274723844259907,- 0.010867353884154204,0,0.014183460298706842,- 0.0006908168538496365,2.6561104738730074e-05,- 9.406905853128523e-05],[8.802855588090064e-05,- 0.00023081526160798342,0.0002410441405481582,0.0004174704803040788,0,- 0.0005448590380321288,2.6537798147833656e-05,- 1.020347480250257e-06,3.613672239391197e-06],[- 0.0003117975921524472,0.0008175488292546338,- 0.0008537795704277643,- 0.0014786825621636638,0,0.0019298934808241715,- 9.399701586286605e-05,3.6140759588431845e-06,- 1.2799645430907065e-05]]
                F5 = np.asarray(F5)
                F6=[[- 0.01687698626266183,0.05138642485755831,- 0.09048388655993281,0.07161961142443905,0.16016300853240492,0,- 0.21916529901662068,0.05362554554656358,- 0.011330668713655772,0.0010622501919052285],[0.009702563832042202,- 0.030433500935833527,0.056870204696795,- 0.05255988878220711,- 0.07922471361897837,- 0.0068408813363925935,0.12741218847074146,- 0.0308292766608887,0.006513990990037666,- 0.0006106866553160312],[- 0.013918500934591342,0.04633059764611312,- 0.09612766062568166,0.10953926445360597,0.07510917033572358,0.030326184145594372,- 0.1870158070631087,0.04422514743992545,- 0.009344436300778825,0.0008760409031980148],[0.012789828785477485,- 0.04971061116356067,0.1271690345887885,- 0.19180828726062704,0.03387774272022615,- 0.08263309513598999,0.18317257077123728,- 0.04063886379914604,0.008586681923966171,- 0.0008050014303718285],[0.030594065313029266,- 0.08014889590231183,0.09327101863244687,0.036237369686984634,- 0.4778025190489611,0.09977704768557123,0.37666833809778427,- 0.09721068781859835,0.020539876804474468,- 0.0019256134504194815],[0,- 0.006881303186579311,0.03744495324702882,- 0.0878856544511045,0.09920930774423976,- 0.05280377382069296,0.010916470467108186,0,0,0],[- 0.04175086648706004,0.12854836902500122,- 0.23160653019864064,0.19539856553746618,0.3756452013163789,0.010949119701825511,- 0.5444422042833479,0.13266071071964083,- 0.028030196227601768,0.002627830896337666],[0.0102066724153849,- 0.031076899450895677,0.05472181908634335,- 0.043313296636594806,- 0.09686156851175422,0,0.13254430483429896,- 0.0324310494759952,0.006852433367407093,- 0.000642415628194415],[- 0.0021568329584390677,0.006567045385012595,- 0.011563594690592854,0.009152791617338566,0.020468397031862318,0,- 0.028008729337594802,0.006853198921242806,- 0.001448028655260205,0.0001357526864306442],[0.0002022030898536626,- 0.0006156605048449308,0.00108408700224308,- 0.0008580742141254906,- 0.0019189122217370923,0,0.002625818375399513,- 0.000642487398866513,0.0001357526864306442,- 1.2726814352872896e-05]]
                F6 = np.asarray(F6)
                F7=[[- 0.0010465002023227362,0.0037492154330279848,- 0.008797436366540156,0.012056234341024543,0.00194542115800179,- 0.054656583609524814,0,0.05902378870441453,- 0.01483493114358008,0.002825701170205729,- 0.00026490948470678715],[0.0007079107402367019,- 0.0025361771231489846,0.00595107356558551,- 0.008155505137866906,- 0.0013159906983070714,0.036972742552700874,0,- 0.039926962135866745,0.010035169667338072,- 0.0019114608890167756,0.00017919945834532272],[- 0.0013532478648404774,0.004848176587363338,- 0.024497110345698257,0.09442497110402485,- 0.168598277351732,0.10669917722244986,- 0.09019545311058186,0.09454366992543123,- 0.019183311050057585,0.0036539640095347783,- 0.00034255912589388547],[0.002153002089127232,- 0.007713394265936243,0.10962217499149728,- 0.5747007103721099,1.1895693422065816,- 1.1248085655788995,0.6291407079328619,- 0.2485145806881956,0.030520431504261192,- 0.0058134155246211796,0.0005450077054332356],[0.0003716110387450281,- 0.0013313421616680658,- 0.20936635297637582,1.2724243282037435,- 2.7718272184015103,2.8919662736402163,- 1.4606870110584502,0.2740911786700165,0.005267867277751973,- 0.0010034032910003759,9.406905853128523e-05],[- 0.010381000769871064,0.037191209528952426,0.1317457443181654,- 1.196306839958299,2.875510738017403,- 3.5029264089585883,1.5055313641242607,0.2813913585616221,- 0.1471585301949093,0.028030196227601768,- 0.002627830896337666],[0,0,- 0.11170101748451002,0.6711331905956457,- 1.4567193757252488,1.510034142474616,- 0.7678478293925471,0.15510088953204426,0,0,0],[0.011234132350182864,- 0.04024765813757116,0.11698325276238196,- 0.2648692592653877,0.2731068165133786,0.2819852992642,0.15496479304752106,- 0.6649197085922018,0.15925231500474357,- 0.03033377428661782,0.0028437913393704207],[- 0.0028238817350722998,0.010116902948207763,- 0.023739049276621273,0.03253260713548451,0.005249534842813383,- 0.14748561712058822,0,0.1592701066729089,- 0.040030657427901455,0.007624887129124087,- 0.0007148331683553831],[0.0005378822352518667,- 0.0019270291329919547,0.004521723671737385,- 0.006196687073425622,- 0.0009999113986311203,0.02809249849915966,0,- 0.030337163175792166,0.007624887129124087,- 0.0014523594531664927,0.0001361586987343587],[- 5.0426459554862495e-05,0.00018065898121799576,- 0.00042391159422537985,0.000580939413133652,9.374169362166754e-05,- 0.002633671734296218,0,0.0028441090477305158,- 0.0007148331683553831,0.0001361586987343587,- 1.2764878006346127e-05]]
                F7 = np.asarray(F7)
                F8=[[- 1.1333080783002534,2.721636411123314,- 1.7036635944808685,- 5.740802580805209,15.375859010257122,- 15.198346519768192,6.588671166741352,- 0.6459479512520752,- 0.3528680720440361,0.1619142947116127,- 0.1062699944110588,0.03312590822829226],[0.5138876868693091,- 1.2341066505844407,0.7725493619818794,2.6030174320573383,- 6.971998717744902,6.89197012199301,- 2.9896045116326593,0.2928972361997003,0.1620664812357352,- 0.07393375340643898,0.04828506161920596,- 0.015029748587737196],[- 0.26206260842150125,0.6293747990283038,- 0.3941388070785114,- 1.327032408842548,3.5552872052951128,- 3.51645742552359,1.533294875397974,- 0.1493589682172173,- 0.0914772854007669,0.03990993458703969,- 0.025042963110510002,0.007703652286214741],[- 1.0251924108411339,2.4619075575513203,- 1.5406113154248582,- 5.19439924998348,13.909523970426411,- 13.742777175914334,5.932998852427147,- 0.5843478985706579,- 0.29171924641962726,0.13959903578450703,- 0.09482625584248458,0.02984413680719065],[2.9370704204058478,- 7.05332937077007,4.414976995306546,14.878339635815953,- 39.84813852856686,39.385501316047126,- 17.063715864934103,1.6740419416256087,0.9029157235415096,- 0.41672316183116676,0.2748584711430467,- 0.08579757778344206],[- 2.8866430446813744,6.9326938489608345,- 4.341910715233423,- 14.616334582327548,39.16139444252097,- 38.738803805995666,16.9119056687391,- 1.6451838713884703,- 1.0304563499637076,0.44531585317974093,- 0.27693485926545924,0.08495741545500204],[1.255138160302006,- 3.016263896043314,1.8988828347672548,6.329001445022778,- 17.017366029912047,16.96248619102051,- 7.9200836292632895,0.7148750745430805,1.0222405164851311,- 0.33712141602194595,0.14769159532074833,- 0.03948084622091352],[- 0.12294474710927084,0.29524980618085445,- 0.18480875499189175,- 0.6228036786376289,1.6680298417690689,- 1.6486564075368335,0.7142477926183146,- 0.07007484137567477,- 0.037761869382663765,0.017435422611959038,- 0.01150387107624065,0.003591306930007262],[- 0.0671696884799195,0.16338646143233473,- 0.1132017189396423,- 0.310951948248317,0.8997735328058464,- 1.0327467289115644,1.0214576348902302,- 0.03776608813860046,- 0.6602798638155851,0.16937876179736153,- 0.036672674639619006,0.004792320247474787],[0.030820960007024004,- 0.07453592042834663,0.04938792376958423,0.1488026336402136,- 0.4152729449124645,0.4463056496473988,- 0.33686323201574164,0.017437370497322115,0.16937876179736153,- 0.04433414906745526,0.01048081108697225,- 0.0016078640218684971],[- 0.02022887017803868,0.048678328164163114,- 0.03099027763047303,- 0.1010780377407764,0.2739019502639366,- 0.2775503979747036,0.14757848590096545,- 0.011505156288683552,- 0.036672674639619006,0.01048081108697225,- 0.0033398347364895476,0.0007256737727463812],[0.006305634067202083,- 0.015152161133159382,0.009533149973703779,0.0318117251360103,- 0.08549899803006702,0.08514624895176229,- 0.03945060986522323,0.003591708150806951,0.004792320247474787,- 0.0016078640218684971,0.0007256737727463812,- 0.00019682724938844583]]
                F8 = np.asarray(F8)
                F9=[[- 0.0008959751801634945,0.004778534294205304,- 0.010751702161961934,0.014335602882615912,- 0.007466459834695787,0,0,0,0],[0.0047513440250725476,- 0.026924282808744437,0.06651881635101567,- 0.10452956855159605,0.05543234695917972,0.0047513440250725476,0,0,0],[- 0.010722497525330747,0.06671776237983576,- 0.18943078961417653,0.37171324754479923,- 0.18466523515847397,- 0.057186653468430645,0.0035741658417769153,0,0],[0.014284118464041371,- 0.10475020206963673,0.37138708006507565,- 0.9856041740188547,0.3571029616010343,0.3999553169931584,- 0.057136473856165486,0.004761372821347124,0],[- 0.00744047619047619,0.05555555555555555,- 0.18452380952380953,0.35714285714285715,- 0.44146825396825395,0.35714285714285715,- 0.18452380952380953,0.05555555555555555,- 0.00744047619047619],[0,0.004761904761904762,- 0.05714285714285714,0.4,0.35714285714285715,- 0.9857142857142858,0.37142857142857144,- 0.10476190476190476,0.014285714285714285],[0,0,0.0035714285714285713,- 0.05714285714285714,- 0.18452380952380953,0.37142857142857144,- 0.18928571428571428,0.06666666666666667,- 0.010714285714285714],[0,0,0,0.004761904761904762,0.05555555555555555,- 0.10476190476190476,0.06666666666666667,- 0.026984126984126985,0.004761904761904762],[0,0,0,0,- 0.00744047619047619,0.014285714285714285,- 0.010714285714285714,0.004761904761904762,- 0.0008928571428571428]]
                F9 = np.asarray(F9)
                F10=[[- 0.0008908770047011027,0.0047513440250725476,- 0.010690524056413232,0.014254032075217643,- 0.0074239750391758555,0,0,0,0],[0.004765554455702554,- 0.027004808582314473,0.06671776237983576,- 0.10484219802545619,0.055598135316529795,0.004765554455702554,0,0,0],[- 0.010713088848031028,0.06665921949885974,- 0.18926456964854818,0.37138708006507565,- 0.18450319682720104,- 0.057136473856165486,0.003571029616010343,0,0],[0.014285714285714285,- 0.10476190476190476,0.37142857142857144,- 0.9857142857142858,0.35714285714285715,0.4,- 0.05714285714285714,0.004761904761904762,0],[- 0.00744047619047619,0.05555555555555555,- 0.18452380952380953,0.35714285714285715,- 0.44146825396825395,0.35714285714285715,- 0.18452380952380953,0.05555555555555555,- 0.00744047619047619],[0,0.004761904761904762,- 0.05714285714285714,0.4,0.35714285714285715,- 0.9857142857142858,0.37142857142857144,- 0.10476190476190476,0.014285714285714285],[0,0,0.0035714285714285713,- 0.05714285714285714,- 0.18452380952380953,0.37142857142857144,- 0.18928571428571428,0.06666666666666667,- 0.010714285714285714],[0,0,0,0.004761904761904762,0.05555555555555555,- 0.10476190476190476,0.06666666666666667,- 0.026984126984126985,0.004761904761904762],[0,0,0,0,- 0.00744047619047619,0.014285714285714285,- 0.010714285714285714,0.004761904761904762,- 0.0008928571428571428]]
                F10 = np.asarray(F10)
                F11=[[- 0.0008935414604442288,0.004765554455702554,- 0.010722497525330747,0.014296663367107661,- 0.007446178837035241,0,0,0,0],[0.004761372821347124,- 0.02698111265430037,0.06665921949885974,- 0.10475020206963673,0.05554934958238311,0.004761372821347124,0,0,0],[- 0.010714285714285714,0.06666666666666667,- 0.18928571428571428,0.37142857142857144,- 0.18452380952380953,- 0.05714285714285714,0.0035714285714285713,0,0],[0.014285714285714285,- 0.10476190476190476,0.37142857142857144,- 0.9857142857142858,0.35714285714285715,0.4,- 0.05714285714285714,0.004761904761904762,0],[- 0.00744047619047619,0.05555555555555555,- 0.18452380952380953,0.35714285714285715,- 0.44146825396825395,0.35714285714285715,- 0.18452380952380953,0.05555555555555555,- 0.00744047619047619],[0,0.004761904761904762,- 0.05714285714285714,0.4,0.35714285714285715,- 0.9857142857142858,0.37142857142857144,- 0.10476190476190476,0.014285714285714285],[0,0,0.0035714285714285713,- 0.05714285714285714,- 0.18452380952380953,0.37142857142857144,- 0.18928571428571428,0.06666666666666667,- 0.010714285714285714],[0,0,0,0.004761904761904762,0.05555555555555555,- 0.10476190476190476,0.06666666666666667,- 0.026984126984126985,0.004761904761904762],[0,0,0,0,- 0.00744047619047619,0.014285714285714285,- 0.010714285714285714,0.004761904761904762,- 0.0008928571428571428]]
                F11 = np.asarray(F11)
                F12=[[- 0.0008927574040025857,0.004761372821347124,- 0.010713088848031028,0.014284118464041371,- 0.007439645033354881,0,0,0,0],[0.004761904761904762,- 0.026984126984126985,0.06666666666666667,- 0.10476190476190476,0.05555555555555555,0.004761904761904762,0,0,0],[- 0.010714285714285714,0.06666666666666667,- 0.18928571428571428,0.37142857142857144,- 0.18452380952380953,- 0.05714285714285714,0.0035714285714285713,0,0],[0.014285714285714285,- 0.10476190476190476,0.37142857142857144,- 0.9857142857142858,0.35714285714285715,0.4,- 0.05714285714285714,0.004761904761904762,0],[- 0.00744047619047619,0.05555555555555555,- 0.18452380952380953,0.35714285714285715,- 0.44146825396825395,0.35714285714285715,- 0.18452380952380953,0.05555555555555555,- 0.00744047619047619],[0,0.004761904761904762,- 0.05714285714285714,0.4,0.35714285714285715,- 0.9857142857142858,0.37142857142857144,- 0.10476190476190476,0.014285714285714285],[0,0,0.0035714285714285713,- 0.05714285714285714,- 0.18452380952380953,0.37142857142857144,- 0.18928571428571428,0.06666666666666667,- 0.010714285714285714],[0,0,0,0.004761904761904762,0.05555555555555555,- 0.10476190476190476,0.06666666666666667,- 0.026984126984126985,0.004761904761904762],[0,0,0,0,- 0.00744047619047619,0.014285714285714285,- 0.010714285714285714,0.004761904761904762,- 0.0008928571428571428]]
                F12 = np.asarray(F12)
                Fint=[[- 1.0 / 1120.0,1.0 / 210.0,- 3.0 / 280.0,1.0 / 70.0,- 5.0 / 672.0,0,0,0,0],[1.0 / 210.0,- 17.0 / 630.0,1.0 / 15.0,- 11.0 / 105.0,1.0 / 18.0,1.0 / 210.0,0,0,0],[- 3.0 / 280.0,1.0 / 15.0,- 53.0 / 280.0,13.0 / 35.0,- 31.0 / 168.0,- 2.0 / 35.0,1.0 / 280.0,0,0],[1.0 / 70.0,- 11.0 / 105.0,13.0 / 35.0,- 69.0 / 70.0,5.0 / 14.0,2.0 / 5.0,- 2.0 / 35.0,1.0 / 210.0,0],[- 5.0 / 672.0,1.0 / 18.0,- 31.0 / 168.0,5.0 / 14.0,- 445.0 / 1008.0,5.0 / 14.0,- 31.0 / 168.0,1.0 / 18.0,- 5.0 / 672.0],[0,1.0 / 210.0,- 2.0 / 35.0,2.0 / 5.0,5.0 / 14.0,- 69.0 / 70.0,13.0 / 35.0,- 11.0 / 105.0,1.0 / 70.0],[0,0,1.0 / 280.0,- 2.0 / 35.0,- 31.0 / 168.0,13.0 / 35.0,- 53.0 / 280.0,1.0 / 15.0,- 3.0 / 280.0],[0,0,0,1.0 / 210.0,1.0 / 18.0,- 11.0 / 105.0,1.0 / 15.0,- 17.0 / 630.0,1.0 / 210.0],[0,0,0,0,- 5.0 / 672.0,1.0 / 70.0,- 3.0 / 280.0,1.0 / 210.0,- 1.0 / 1120.0]]
                Fint = np.asarray(Fint)

                FN = np.fliplr(np.flipud(F1))
                FNm1 = np.fliplr(np.flipud(F2))
                FNm2 = np.fliplr(np.flipud(F3))
                FNm3 = np.fliplr(np.flipud(F4))
                FNm4 = np.fliplr(np.flipud(F5))
                FNm5 = np.fliplr(np.flipud(F6))
                FNm6 = np.fliplr(np.flipud(F7))
                FNm7 = np.fliplr(np.flipud(F8))
                FNm8 = np.fliplr(np.flipud(F9))
                FNm9 = np.fliplr(np.flipud(F10))
                FNm10 = np.fliplr(np.flipud(F11))
                FNm11 = np.fliplr(np.flipud(F12))

                D2 = np.zeros((n, n))
                D2[0:8, 0:8] = np.dot(b[0] / dx ** 2, F1)
                D2[0:8, 0:8] = D2[0:8, 0:8] + np.dot(b[1] / dx ** 2, F2)
                D2[0:8, 0:8] = D2[0:8, 0:8] + np.dot(b[2] / dx ** 2, F3)
                D2[0:8, 0:8] = D2[0:8, 0:8] + np.dot(b[3] / dx ** 2, F4)
                D2[0:9, 0:9] = D2[0:9, 0:9] + np.dot(b[4] / dx ** 2, F5)
                D2[0:10, 0:10] = D2[0:10, 0:10] + np.dot(b[5] / dx ** 2, F6)
                D2[0:11, 0:11] = D2[0:11, 0:11] + np.dot(b[6] / dx ** 2, F7)
                D2[0:12, 0:12] = D2[0:12, 0:12] + np.dot(b[7] / dx ** 2, F8)
                D2[4:13, 4:13] = D2[4:13, 4:13] + np.dot(b[8] / dx ** 2, F9)
                D2[5:14, 5:14] = D2[5:14, 5:14] + np.dot(b[9] / dx ** 2, F10)
                D2[6:15, 6:15] = D2[6:15, 6:15] + np.dot(b[10] / dx ** 2, F11)
                D2[7:16, 7:16] = D2[7:16, 7:16] + np.dot(b[11] / dx ** 2, F12)
                D2[n - 8:n, n - 8:n] = D2[n - 8:n, n - 8:n] + np.dot(b[n - 1] / dx ** 2, FN)
                D2[n - 8:n, n - 8:n] = D2[n - 8:n, n - 8:n] + np.dot(b[n - 2] / dx ** 2, FNm1)
                D2[n - 8:n, n - 8:n] = D2[n - 8:n, n - 8:n] + np.dot(b[n - 3] / dx ** 2, FNm2)
                D2[n - 8:n, n - 8:n] = D2[n - 8:n, n - 8:n] + np.dot(b[n - 4] / dx ** 2, FNm3)
                D2[n - 9:n, n - 9:n] = D2[n - 9:n, n - 9:n] + np.dot(b[n - 5] / dx ** 2, FNm4)
                D2[n - 10:n, n - 10:n] = D2[n - 10:n, n - 10:n] + np.dot(b[n - 6] / dx ** 2, FNm5)
                D2[n - 11:n, n - 11:n] = D2[n - 11:n, n - 11:n] + np.dot(b[n - 7] / dx ** 2, FNm6)
                D2[n - 12:n, n - 12:n] = D2[n - 12:n, n - 12:n] + np.dot(b[n - 8] / dx ** 2, FNm7)
                D2[n - 13:n - 4, n - 13:n - 4] = D2[n - 13:n - 4, n - 13:n - 4] + np.dot(b[n - 9] / dx ** 2, FNm8)
                D2[n - 14:n - 5, n - 14:n - 5] = D2[n - 14:n - 5, n - 14:n - 5] + np.dot(b[n - 10] / dx ** 2, FNm9)
                D2[n - 15:n - 6, n - 15:n - 6] = D2[n - 15:n - 6, n - 15:n - 6] + np.dot(b[n - 11] / dx ** 2, FNm10)
                D2[n - 16:n - 7, n - 16:n - 7] = D2[n - 16:n - 7, n - 16:n - 7] + np.dot(b[n - 12] / dx ** 2, FNm11)

                for i in range(12, n - 12):
                    D2[i-4:i+5, i-4:i+5] = D2[i-4:i+5, i-4:i+5] + np.dot(b[i] / dx ** 2, Fint)

                d2p = D2

                # upper portion of db_mat
                db_mat[0, 0:12] = 1 / dx * np.asarray([- 2.8750912094789585,4.193780470189746,- 2.254250179264897,1.4287363930683017,- 0.594415612658386,0.10124013814419368,0,0,0,0,0,0])
                # lower portion of D1b
                db_mat[n - 1, n - 12:n] = - np.flip(db_mat[0, 0:12])
            elif app == 1:
                d2p = d_mat @ np.diag(b) @ d_mat
                db_mat = d_mat

        d2p_ref = (1 / dx_ref ** 2) * ((dx ** 2) * d2p)
        db_mat_ref = (1 / dx_ref) * (dx * db_mat)

        # oper_test = operator_test_1d(p, x_ref, h_mat_ref, d_mat_ref)
        # oper_test = operator_test_1d(p, x_ref, h_mat_ref, d_mat_ref, der=d2p_ref)
        return {'h_mat': h_mat, 'q_mat': q_mat, 'd_mat': d_mat, 'd2p': d2p, 'db_mat': db_mat, 'tl': txL, 'tr': txR,
                'e_mat': e_mat, 'x': x, 'x_ref': x_ref, 'd_mat_ref': d_mat_ref, 'h_mat_ref': h_mat_ref,
                'd2p_ref': d2p_ref, 'db_mat_ref': db_mat_ref}

    @staticmethod
    def hqd_hgt(p, xl, xr, n, b, app):
        """Computes hybrid-Gauss-Trapezoidal(HGT) operators up to degree p = 4 for first derivative twice
            and order-matched and compatible operators
                Inputs: p   - degree of operator
                        xl  - start point of the element
                        xr  - end point of the element
                        n   - number of degrees of freedom in the mesh
                        b   - (n,1) vector for holding entries of the variable coefficient, use np.ones(n,1) for constant
                               coefficient
                        app - 1 for first derivative twice
                              2 for order-matched and compatible operator
                Outputs: h_mat  - the norm matrix
                         q_mat  - h_mat @ d_mat
                         d_mat  - first derivative operator
                         d2p    - second derivative operator
                         db_mat - normal derivative at boundaries (interfaces)
                         txL    - left projection vector
                         txR    - right projection vector
                         e_mat  - the E matrix
                         x      - the nodal locations"""

        if p <= 4:
            bn = 2*p        # size of boundary block
        elif p >= 5:
            sys.exit('Only operators with degrees p <= 5 are supported')

        x = np.linspace(0, n - 1, n)  # 1D mesh
        bn2 = bn + p                # size of the block at boundaries including terms from center-difference
        dx = (xr-xl)/(n - 1)          # mesh size
        dx_ref = (1 -(-1))/(n-1)

        # the H and D1 matrices
        h_mat = np.eye(n)
        d_mat = np.zeros((n, n))

        # the H and D1 matrices obtained from solution of the accuracy equation (see CSBP_Oper.py)
        if p == 1:
            x = dx*x + xl
            x_ref = 2/(xr - xl) * (x - xl) - 1  # map to a reference element [-1, 1]

            h_mat[0:bn, 0:bn] = [[1/2, 0], [0, 1]]
            d_mat[0:bn, 0:bn2] = [[-1, 1, 0], [-1/2, 0, 1/2]]

            txL = np.zeros((n, 1))
            txL[0, 0] = 1
            txR = np.zeros((n, 1))
            txR[n - 1, 0] = 1
            e_mat = np.zeros((n, n))
            e_mat[0, 0] = -1
            e_mat[n - 1, n - 1] = 1
        elif p == 2:
            x[0] = 291/470 - (17/470)*sqrt(119)
            x[1] = 291/470 + (17/470)*sqrt(119)
            x[n - 2] = n - 1 - (291 / 470 + (17 / 470) * sqrt(119))
            x[n - 1] = n - 1 - (291 / 470 - (17 / 470) * sqrt(119))
            x = dx*x + xl
            x_ref = 2/(xr - xl) * (x - xl) - 1  # map to a reference element [-1, 1]

            h_mat[0:bn, 0:bn] = [[0.5626503937015195,0,0,0],[0,0.9243601307812251,0,0],[0,0,1.019036046982584,0],[0,0,0,0.9939534285346713]]
            d_mat[0:bn, 0:bn2] = [[- 2.174199764799835,3.145750470689078,- 1.2140224361207093,0.24247173023146643,0,0],[- 0.43987870836356463,- 0.4109380435663457,1.0370870997470494,- 0.1862703478171391,0,0],[0.07162334465472171,- 0.6071238279682889,- 0.07464330351364873,0.6919204163979631,- 0.08177662957074722,0],[- 0.007280390946012315,0.10080071968312483,- 0.6769706855298216,- 0.0034316002355072664,0.6707222366036759,- 0.08384027957545949]]

            txL = np.zeros((n, 1))
            txL[0, 0] = 1.5641702935744421035
            txL[1, 0] = -.87161315237204648508
            txL[2, 0] = 0.39003645200486026731
            txL[3, 0] = -0.082593593207255885758
            txR = np.flip(txL)
            e_mat = txR @ txR.transpose() - txL @ txL.transpose()
        elif p == 3:
            x[0] = 0.2180540672543505
            x[1] = 1.0011818730312165
            x[2] = 1.9975805264180329
            x[n - 3] = n - 1 - 1.9975805264180329
            x[n - 2] = n - 1 - 1.0011818730312165
            x[n - 1] = n - 1 - 0.2180540672543505
            x = dx * x + xl
            x_ref = 2/(xr - xl) * (x - xl) - 1  # map to a reference element [-1, 1]

            h_mat[0:bn, 0:bn] = [[0.54142014473072,0,0,0,0,0],[0,0.9493700968218415,0,0,0,0],[0,0,1.0115402020235404,0,0,0],[0,0,0,0.9961556602732163,0,0],[0,0,0,0,1.001887133878803,0],[0,0,0,0,0,0.9996267622718789]]
            d_mat[0:bn, 0:bn2] = [[- 2.7049617503550327,4.907594894493699,- 3.891011093934746,2.4490610684756597,- 0.9052732401762246,0.14459012149664388,0,0,0],[- 0.279784174829044,- 1.0283294212357414,2.1149390624168767,- 1.160753668439965,0.42158823744345736,- 0.0676600353555837,0,0,0],[0.00870562497765266,- 0.2916657688116944,- 0.7427055796193681,1.4002592760886794,- 0.4459163214035907,0.07132276876832125,0,0,0],[0.013055129602793068,0.008795261190797448,- 0.4591698140920839,- 0.30722942556794147,0.9122106551220589,- 0.18439279251744534,0.01673098626182126,0,0],[- 0.0028252537128808566,0.002238829042572789,0.09780258253377588,- 0.682064240655529,- 0.04140527245917605,0.7593355446762413,- 0.14971746310312967,0.01663527367812552,0],[- 0.0002853325693438575,0.0005515582427172875,- 0.016286908072402028,0.14808299557931817,- 0.747920308833952,- 0.0010389202163684297,0.7502800328149024,- 0.1500560065629805,0.016672889618108942]]

            txL = np.zeros((n, 1))
            txL[0, 0] = 1.7114442920342359
            txL[1, 0] = - 1.3973297407579386
            txL[2, 0] = 1.2257867286377238
            txL[3, 0] = - 0.78236606685361
            txL[4, 0] = 0.2880396144685478
            txL[5, 0] = - 0.04557482752895886
            txR = np.flip(txL)
            e_mat = txR @ txR.transpose() - txL @ txL.transpose()

        elif p == 4:
            x[0] = 1967606921 / 10000000000
            x[1] = 2716855217 / 2884637151
            x[2] = 393040771 / 200000000
            x[3] = 1498739191 / 500000000
            x[n - 4] = n - 1 - 1498739191 / 500000000
            x[n - 3] = n - 1 - 393040771 / 200000000
            x[n - 2] = n - 1 - 2716855217 / 2884637151
            x[n - 1] = n - 1 - 1967606921 / 10000000000
            x = dx * x + xl
            x_ref = 2/(xr - xl) * (x - xl) - 1  # map to a reference element [-1, 1]

            txL = np.zeros((n, 1))
            txL[0:8, 0] = [1.750989404942544,- 1.633343421557352,1.9910263083850168,- 2.133524567689234,1.6103351899246576,- 0.7740803545446678,0.21488407333883414,- 0.026286632799799065]
            txR = np.flip(txL)
            e_mat = txR @ txR.transpose() - txL @ txL.transpose()

            h_mat[0:bn, 0:bn] = [[0.4935478462196757,0,0,0,0,0,0,0],[0,0.9426143027979039,0,0,0,0,0,0],[0,0,1.054084446019679,0,0,0,0,0],[0,0,0,1.009295142895124,0,0,0,0],[0,0,0,0,1.000802938320865,0,0,0],[0,0,0,0,0,0.9995175484640714,0,0],[0,0,0,0,0,0,1.0001607113307747,0],[0,0,0,0,0,0,0,0.9999770639519063]]
            d_mat[0:bn, 0:bn2] = [[- 3.106045259547541,6.186024626714151,- 6.795485445348513,7.046955122048996,- 5.1544171964983505,2.3739507792879073,- 0.6211385401867534,0.0701559135301034,0,0,0,0],[- 0.2048898524283518,- 1.415112588906183,3.1533556736061277,- 2.721598212221078,1.6947379289784825,- 0.5915965587305997,0.08263081138293592,0.00247279831866609,0,0,0,0],[- 0.12557700274864642,0.2652838339984491,- 1.8803928734791613,2.7595241333547085,- 1.249613991550057,0.1464124897357042,0.12555422418012024,- 0.04119081349111746,0,0,0,0],[0.2553954530833025,- 0.9108940259241308,1.3267992874994454,- 2.2550029656719173,1.877938737960781,- 0.148224685508683,- 0.21100368377896989,0.06499188234017184,0,0,0,0],[- 0.27550713487852957,1.031917611422346,- 1.8875055059351356,1.5390594732112186,- 1.2955494656423014,0.9420229577443902,- 0.03506456841625065,- 0.01580480427048131,- 0.003568563235256554,0,0,0],[0.18383689762643451,- 0.7070327861604674,1.3875526494759347,- 1.50264195056257,0.3038961058193516,- 0.2997448099899656,0.7797149233259708,- 0.1801215031630519,0.03811362607267667,- 0.0035731524443134376,0,0],[- 0.06968694751191734,0.2730466212382183,- 0.5600945845648416,0.6713175545070735,- 0.3108926979707199,- 0.6129027085775677,- 0.023083872647452118,0.7977462363778686,- 0.19996786289864138,0.03808911674259836,- 0.003570854694618596,0],[0.01140257703176218,- 0.04526703206837936,0.09575816959712413,- 0.12168195895700654,0.058149118086597056,0.1596902998941416,- 0.7922440354540534,- 0.0003455014564137568,0.8000183492593345,- 0.20000458731483362,0.03809611186949212,- 0.0035715104877648857]]

        # construct interior operator for the D1 matrix
        d_int = np.zeros((1, 2*p + 1))
        k = p
        for i in range(0, p):
            d_int[0, 2*p-i] = (-1)**(k+1)*factorial(p)**2/(k*factorial(p+k)*factorial(p-k))
            d_int[0, i] = -1*d_int[0, 2*p-i]
            k = k-1

        # values at the right boundary
        for i in range(n - bn, n):
            h_mat[i, i] = h_mat[n - i - 1, n - i - 1]

        for i in range(0, bn2):
            for j in range(0, bn2):
                d_mat[n - 1 - i, n - 1 - j] = -d_mat[i, j]

        # interior operator
        for i in range(bn, n - bn):
            d_mat[i, (i-p):(i+p+1)] = d_int[0, 0:(2*p+1)]

        d_mat_ref = (1/dx_ref)*d_mat
        d_mat = (1 / dx) * d_mat
        h_mat_ref = dx_ref*h_mat
        h_mat = dx * h_mat
        q_mat = h_mat @ d_mat

        # ================================================================================================================ #
        #                                         Second Derivative Operator: HGT
        # ================================================================================================================ #
        db_mat = np.zeros((n, n))
        if p == 1:
            if app == 2:
                d2_mat = np.zeros((n, n))
                c2_mat = np.eye(n, n)
                d2_mat[0:bn, 0:bn2] = [[1, -2, 1], [1, -2, 1]]
                db_mat[0:bn, 0:bn2] = [[-3/2, 2, -1/2]]
                d2_int = [1, -2, 1]
                c2_mat[1, 1] = 0
                c2_mat[n - 2, n - 2] = 0
                a1 = -1/4

                # values at the right boundary
                for i in range(0, bn2):
                    for j in range(0, bn2):
                        d2_mat[n - 1 - i, n - 1 - j] = d2_mat[i, j]
                        db_mat[n - 1 - i, n - 1 - j] = -db_mat[i, j]

                # interior operator
                for i in range(bn, n - bn):
                    d2_mat[i, (i - p):(i + p + 1)] = d2_int

                d2_mat = (1/(dx**2))*d2_mat
                db_mat = 1/dx*db_mat

                d2p1 = np.linalg.inv(h_mat)@(-d_mat.transpose()@h_mat @ np.diag(b) @d_mat
                                             + a1*(dx**3)*d2_mat.transpose()@ np.diag(b) @ c2_mat @ d2_mat
                                             + e_mat @ np.diag(b) @ db_mat)
                d2p = d2p1
            elif app == 1:
                d2p1 = d_mat @ np.diag(b) @d_mat
                db_mat = d_mat
                d2p = d2p1

        elif p == 2:
            if app == 2:
                F1=[[0.749475902129903,1.3628694141056,- 2.63952729507537,0.527181978839863],[2.30555137903766,- 4.16586927378981,2.32460091774502,- 0.464283022992869],[- 0.703368114220666,1.35460840993537,- 0.813771556657863,0.16253126094316],[0.134724006789794,- 0.268075896427118,0.166632770618624,- 0.0332808809812996]]
                F1 = np.asarray(F1)
                F2=[[4.14629684348676,- 10.7220428061232,6.71035655794945,- 0.134610595312995],[- 1.69494785461883,3.36716268525512,- 1.59566925832989,- 0.0765455723063979],[1.02843643385315,- 1.04873862932028,- 0.154928674120422,0.175230869587559],[- 0.209636576776514,0.240425793089916,0.00147808319578244,- 0.0322672995091844]]
                F2 = np.asarray(F2)
                F3=[[- 0.599555861115246,- 1.77920196100521,6.36363221733389,- 3.99548242485559,0.0106080296421625],[0.248147279864062,0.223839716431164,- 2.20512628881026,1.78787299493892,- 0.0547337024238934],[- 0.075921355135874,- 0.301120997555788,0.869238911393816,- 0.486092480920781,- 0.00610407778137251],[- 0.033164868089316,0.486217721388898,- 0.13697293415806,- 0.374090720296296,0.0580108011547736],[0.00596861205456014,- 0.0505936523306907,- 0.00622027529280406,0.0576600346998303,- 0.0068147191308956]]
                F3 = np.asarray(F3)
                F4=[[- 0.323082547298122,1.28348731986444,- 0.957675037024675,- 0.986677229545806,1.04916727270641,- 0.0652197787022523],[0.303363176037666,- 0.950361928456209,0.781363900862993,0.439716433166368,- 0.703889849670432,0.129808268059614],[- 0.175974855434698,0.620271413671211,- 0.932989163457952,- 0.174992772147648,0.827391577989959,- 0.163706200620872],[- 0.0588277115178424,0.107008452171046,- 0.0357052872798519,- 0.0311440785599124,0.0266367265506088,- 0.00796810136404798],[0.120335494125551,- 0.388758212643046,0.725949426268658,0.0512921738291029,- 0.638719334782984,0.129900453202718],[- 0.0366959341639482,0.119989587640069,- 0.166822519547231,- 0.00791992166970728,0.129900453202718,- 0.0384516654619002]]
                F4 = np.asarray(F4)
                F5=[[- 0.0408883147853736,0.163553259141494,- 0.122664944356121,0,0],[0.167680559150919,- 0.838402795754595,0.503041677452757,0.167680559150919,0],[- 0.125,0.5,- 0.75,0.5,- 0.125],[0,0.166666666666667,0.5,- 0.833333333333333,0.166666666666667],[0,0,- 0.125,0.166666666666667,- 0.0416666666666667]]
                F5 = np.asarray(F5)
                F6=[[- 0.0419201397877297,0.167680559150919,- 0.125760419363189,0,0],[0.166666666666667,- 0.833333333333333,0.5,0.166666666666667,0],[- 0.125,0.5,- 0.75,0.5,- 0.125],[0,0.166666666666667,0.5,- 0.833333333333333,0.166666666666667],[0,0,- 0.125,0.166666666666667,- 0.0416666666666667]]
                F6 = np.asarray(F6)
                Fint=[[- 1.0 / 24.0,1.0 / 6.0,- 1.0 / 8.0,0,0],[1.0 / 6.0,- 5.0 / 6.0,1.0 / 2.0,1.0 / 6.0,0],[- 1.0 / 8.0,1.0 / 2.0,- 3.0 / 4.0,1.0 / 2.0,- 1.0 / 8.0],[0,1.0 / 6.0,1.0 / 2.0,- 5.0 / 6.0,1.0 / 6.0],[0,0,- 1.0 / 8.0,1.0 / 6.0,- 1.0 / 24.0]]
                Fint = np.asarray(Fint)

                FN = np.fliplr(np.flipud(F1))
                FNm1 = np.fliplr(np.flipud(F2))
                FNm2 = np.fliplr(np.flipud(F3))
                FNm3 = np.fliplr(np.flipud(F4))
                FNm4 = np.fliplr(np.flipud(F5))
                FNm5 = np.fliplr(np.flipud(F6))

                D2 = np.zeros((n, n))
                D2[0:4, 0:4] = D2[0:4, 0:4] + np.dot(b[0] / dx ** 2, F1)
                D2[0:4, 0:4] = D2[0:4, 0:4] + np.dot(b[1] / dx ** 2, F2)
                D2[0:5, 0:5] = D2[0:5, 0:5] + np.dot(b[2] / dx ** 2, F3)
                D2[0:6, 0:6] = D2[0:6, 0:6] + np.dot(b[3] / dx ** 2, F4)
                D2[2:7, 2:7] = D2[2:7, 2:7] + np.dot(b[4] / dx ** 2, F5)
                D2[3:8, 3:8] = D2[3:8, 3:8] + np.dot(b[5] / dx ** 2, F6)
                D2[n - 4:n, n - 4:n] = D2[n - 4:n, n - 4:n] + np.dot(b[n - 1] / dx ** 2, FN)
                D2[n - 4:n, n - 4:n] = D2[n - 4:n, n - 4:n] + np.dot(b[n - 2] / dx ** 2, FNm1)
                D2[n - 5:n, n - 5:n] = D2[n - 5:n, n - 5:n] + np.dot(b[n - 3] / dx ** 2, FNm2)
                D2[n - 6:n, n - 6:n] = D2[n - 6:n, n - 6:n] + np.dot(b[n - 4] / dx ** 2, FNm3)
                D2[n - 7:n - 2, n - 7:n - 2] = D2[n - 7:n - 2, n - 7:n - 2] + np.dot(b[n - 5] / dx ** 2, FNm4)
                D2[n - 8:n - 3, n - 8:n - 3] = D2[n - 8:n - 3, n - 8:n - 3] + np.dot(b[n - 6] / dx ** 2, FNm5)

                # interior of the operator
                for i in range(6, n - 6):
                    D2[i-2:i+3, i-2:i+3] = D2[i-2:i+3, i-2:i+3] + np.dot(b[i] / dx ** 2, Fint)

                d2p = D2
                # upper portion of db_mat
                db_mat[0:bn, 0:bn2] = 1 / dx * np.asarray([[- 1.2594566074497204,1.2594566074497204,0,0,0,0],[1.842351885525726,- 4.302391584650601,2.460039699124875,0,0,0],[0.5443727324765248,1.713504476309843,- 5.859939826975134,3.6020626181887665,0,0],[- 0.6722417786640936,3.793874071170223,- 2.950430712150868,- 3.8090780901872887,3.6378765098320276,0]])
                # lower portion of db_mat
                db_mat[n - bn:n, n - bn2:n] = - np.fliplr(np.flipud(db_mat[0:bn, 0:bn2]))

            elif app == 1:
                d2p = d_mat @ np.diag(b) @d_mat
                db_mat = d_mat

        elif p == 3:
            if app == 2:
                F1=[[6.006486132644446,- 8.380752042164469,1.999038038129194,1.5093051447273043,- 1.525188021464084,0.3911107481276087],[1.366926984468683,- 3.651877983816059,5.058549399383178,- 4.472554532709764,2.1036309608857313,- 0.4046748282117695],[- 0.5258733182113468,1.918912929302258,- 3.3023748489831153,3.1395165045159277,- 1.5313101089637233,0.30112884233999987],[0.29024991877425876,- 1.1519141916927829,2.067561899261764,- 1.9889718783440227,0.9755364497969873,- 0.19246219779620458],[- 0.11153313454661616,0.4312560178039789,- 0.7644506537203294,0.7328649784599737,- 0.3588721361320434,0.07073492813503636],[0.01967087043879856,- 0.07198848484856402,0.1240816091699836,- 0.11801521311190494,0.05757453836488417,- 0.011323320013197392]]
                F1 = np.asarray(F1)
                F2=[[- 1.9364745933038487,- 2.97997466978671,6.863188183867519,- 2.4237260592302485,0.5101809026308431,- 0.03319376417755423],[0.5500459979317281,0.09518056638172934,- 0.5376860643844783,- 0.3302477702667357,0.29228407533575373,- 0.06957680499799718],[- 0.13438263592722358,1.0921930852253772,- 1.9647676994931185,1.5931963123741477,- 0.7205410619589935,0.13430199977981058],[0.13752272218564338,- 0.5225217619256273,0.8922015735577855,- 0.8233609083555697,0.3910064480180914,- 0.07484807348032327],[- 0.05186855288213895,0.18566054460246512,- 0.3150538604461971,0.29506247763052834,- 0.14083007419987878,0.027029465295221357],[0.007971764710386652,- 0.0303746895526084,0.051879249200181894,- 0.047843916086693715,0.02271531720761338,- 0.004347725478879813]]
                F2 = np.asarray(F2)
                F3=[[- 0.5286840331790312,2.9638674028714243,- 0.2536477596036523,- 2.4908846079526112,0.3105090483383043,- 0.0011600504744335798],[0.24880724987034417,- 1.4684775010942128,- 0.10707831023094312,1.584362683091585,- 0.2797787908981748,0.022164669261401607],[- 0.1961547331012217,0.9177789539489688,- 0.6534801611436929,0.0938132295994727,- 0.21492910762166106,0.052971818318134196],[0.11894264216176086,- 0.3205052662880115,1.1220641426009597,- 1.3777836729678932,0.5586949123806996,- 0.1014127578875154],[- 0.04415181340613606,0.13782212154748663,- 0.3585435323881534,0.405938678049866,- 0.17317586826501669,0.032110414461953535],[0.006994914529389091,- 0.021629421889805763,0.05743574959674179,- 0.06546280440931217,0.027809125067086264,- 0.005147562894099221]]
                F3 = np.asarray(F3)
                F4=[[- 0.33826949183934096,1.474297506196282,- 3.8528023181870568,2.127657530515812,0.5850895276320975,0.004429124879900892,- 0.00040187919769424623],[0.15723976906221454,- 0.6866472712796524,1.8033287753414289,- 0.9844161148519431,- 0.29105245832537535,0.0017017052605317424,- 0.00015440520720424523],[- 0.12365441582471767,0.5692403712496119,- 1.6888572289563464,0.6738984510913253,0.6451871922864713,- 0.08337989242227258,0.007565522575928198],[0.08797905040759209,- 0.36365256578835775,0.8189326148224524,- 0.6211916846821138,0.12944322566602606,- 0.056650891724003345,0.005140251298404465],[- 0.04257815747415937,0.12613006848375796,0.06504604111043623,0.47149501024646506,- 0.7721609114981509,0.16724282303170868,- 0.015174873900057622],[0.0072732867475906295,- 0.019650845325718112,- 0.02864515095522951,- 0.08703517015257516,0.15886615697193407,- 0.03388263796202016,0.003074360676018231],[- 0.00021758549337988446,- 0.0001465876865132908,0.007652830234868065,0.005120490426132358,- 0.015203510918700983,0.003073213208624089,- 0.00027884977103035427]]
                F4 = np.asarray(F4)
                F5=[[- 0.37290814778594267,1.4742299121206768,- 2.9008638108728335,3.706055800806841,- 1.909787854035452,0.003969863488686811,- 0.0007827341872233128,8.697046524703476e-05],[0.17363463722768968,- 0.6864360998116602,1.350717699130002,- 1.7256759598960294,0.8892393571684325,- 0.0017940639232050632,0.0003537338678668526,- 3.930376309631696e-05],[- 0.1426776103589565,0.564935012243269,- 1.1217365621378053,1.4881805389073577,- 0.7280366806289467,- 0.07355627100615028,0.01450301960388617,- 0.001611446622654019],[0.09071056181381032,- 0.3647467251503358,0.7879637334378733,- 1.389576543159992,0.44604633552813405,0.5208954970512077,- 0.10270446696078483,0.011411607440087203],[- 0.03403181745638614,0.13417357432333724,- 0.2598319603131482,0.30915087095042626,- 0.17539085830687975,0.03144049511525662,- 0.006199092351681721,0.0006887880390757467],[0.007528447382020516,- 0.022966672410790246,- 0.032586064663389695,0.4655824729007848,0.05905353979567937,- 0.5778942647602535,0.11394285947544244,- 0.012660317719493604],[- 0.00042378805693212853,0.00033582435638591836,0.014670387380066383,- 0.10230963609832934,- 0.006210790868876407,0.11390033170143621,- 0.02245761946546945,0.0024952910517188277],[4.7087561881347614e-05,- 3.731381737621315e-05,- 0.0016300430422295981,0.011367737344258817,0.0006900878743196008,- 0.01265559241127069,0.0024952910517188277,- 0.000277254561302092]]
                F5 = np.asarray(F5)
                F6=[[2.0466246556429897,- 7.6185310885241115,13.171731611113112,- 12.363400446112422,5.726616311259534,- 0.9660503111313962,- 0.016761966365443,0.029354475211725437,- 0.009583241093988375],[- 0.9070046813950189,3.335741879969751,- 5.688067173487256,5.302356264403289,- 2.4948617240342257,0.45949869927723586,0.04239515751910987,- 0.07378497926963277,0.023726557016747814],[0.6825084421014515,- 2.450510787015044,4.060716893237512,- 3.7281183102005255,1.8028677262833923,- 0.3918733196855576,- 0.07189302751259023,0.14251325592795533,- 0.04621087313659343],[- 0.39853854888037554,1.3901336168812692,- 2.214159997614855,1.965312343326581,- 0.8951635086117785,0.2586593742970355,- 0.020613692348668788,- 0.13383545778782124,0.0482058707386133],[0.1435952843016046,- 0.5029083644711869,0.7885961515419277,- 0.5987627847002189,- 0.20533737050699566,- 0.09047943849868113,0.5212803402638523,- 0.04646596215304908,- 0.009517855777253002],[- 0.03162633661742611,0.12196191116707938,- 0.2160253293543376,0.20077115398421727,- 0.08670846452934587,0.010360707862832809,0.0016137997130949721,- 0.0010928639668763775,0.000745421740761536],[- 0.00907526625554961,0.040248694798694556,- 0.07272268757416947,- 0.020534446312257103,0.5222640660543181,0.0016131973821564142,- 0.5717032236191787,0.12762483508433378,- 0.017715169558348027],[0.01589310421762672,- 0.07004925291320883,0.14415788769239646,- 0.13332094882059525,- 0.04655364964443927,- 0.001092456068812235,0.12762483508433378,- 0.04786636829225635,0.011206848744954973],[- 0.0051885597800965695,0.02252528373223881,- 0.04674415594827391,0.04802055099466865,- 0.009535817245343815,0.000745143521244522,- 0.017715169558348027,0.011206848744954973,- 0.0033141244610446273]]
                F6 = np.asarray(F6)
                F7=[[- 0.005576995420607086,0.025096479392731887,- 0.05019295878546377,0.030673474813338972,0,0,0],[0.024952910517188277,- 0.1247645525859414,0.29943492620625933,- 0.17467037362031795,- 0.024952910517188277,0,0],[- 0.050018668854326834,0.300112013125961,- 0.9503547082322098,0.4251586852617781,0.300112013125961,- 0.025009334427163417,0],[0.030555555555555555,- 0.175,0.425,- 0.5611111111111111,0.425,- 0.175,0.030555555555555555],[0,- 0.025,0.3,0.425,- 0.95,0.3,- 0.05],[0,0,- 0.025,- 0.175,0.3,- 0.125,0.025],[0,0,0,0.030555555555555555,- 0.05,0.025,- 0.005555555555555556]]
                F7 = np.asarray(F7)
                F8=[[- 0.005545091226041839,0.024952910517188277,- 0.04990582103437655,0.030498001743230117,0,0,0],[0.025009334427163417,- 0.12504667213581708,0.300112013125961,- 0.1750653409901439,- 0.025009334427163417,0,0],[- 0.05,0.3,- 0.95,0.425,0.3,- 0.025,0],[0.030555555555555555,- 0.175,0.425,- 0.5611111111111111,0.425,- 0.175,0.030555555555555555],[0,- 0.025,0.3,0.425,- 0.95,0.3,- 0.05],[0,0,- 0.025,- 0.175,0.3,- 0.125,0.025],[0,0,0,0.030555555555555555,- 0.05,0.025,- 0.005555555555555556]]
                F8 = np.asarray(F8)
                F9=[[- 0.005557629872702981,0.025009334427163417,- 0.050018668854326834,0.030566964299866398,0,0,0],[0.025,- 0.125,0.3,- 0.175,- 0.025,0,0],[- 0.05,0.3,- 0.95,0.425,0.3,- 0.025,0],[0.030555555555555555,- 0.175,0.425,- 0.5611111111111111,0.425,- 0.175,0.030555555555555555],[0,- 0.025,0.3,0.425,- 0.95,0.3,- 0.05],[0,0,- 0.025,- 0.175,0.3,- 0.125,0.025],[0,0,0,0.030555555555555555,- 0.05,0.025,- 0.005555555555555556]]
                F9 = np.asarray(F9)
                Fint=[[- 1.0 / 180.0,1.0 / 40.0,- 1.0 / 20.0,11.0 / 360.0,0,0,0],[1.0 / 40.0,- 1.0 / 8.0,3.0 / 10.0,- 7.0 / 40.0,- 1.0 / 40.0,0,0],[- 1.0 / 20.0,3.0 / 10.0,- 19.0 / 20.0,17.0 / 40.0,3.0 / 10.0,- 1.0 / 40.0,0],[11.0 / 360.0,- 7.0 / 40.0,17.0 / 40.0,- 101.0 / 180.0,17.0 / 40.0,- 7.0 / 40.0,11.0 / 360.0],[0,- 1.0 / 40.0,3.0 / 10.0,17.0 / 40.0,- 19.0 / 20.0,3.0 / 10.0,- 1.0 / 20.0],[0,0,- 1.0 / 40.0,- 7.0 / 40.0,3.0 / 10.0,- 1.0 / 8.0,1.0 / 40.0],[0,0,0,11.0 / 360.0,- 1.0 / 20.0,1.0 / 40.0,- 1.0 / 180.0]]
                Fint = np.asarray(Fint)

                FN = np.fliplr(np.flipud(F1))
                FNm1 = np.fliplr(np.flipud(F2))
                FNm2 = np.fliplr(np.flipud(F3))
                FNm3 = np.fliplr(np.flipud(F4))
                FNm4 = np.fliplr(np.flipud(F5))
                FNm5 = np.fliplr(np.flipud(F6))
                FNm6 = np.fliplr(np.flipud(F7))
                FNm7 = np.fliplr(np.flipud(F8))
                FNm8 = np.fliplr(np.flipud(F9))

                D2 = np.zeros((n, n))
                D2[0:6, 0:6] = np.dot(b[0] / dx ** 2, F1)
                D2[0:6, 0:6] = D2[0:6, 0:6] + np.dot(b[1] / dx ** 2, F2)
                D2[0:6, 0:6] = D2[0:6, 0:6] + np.dot(b[2] / dx ** 2, F3)
                D2[0:7, 0:7] = D2[0:7, 0:7] + np.dot(b[3] / dx ** 2, F4)
                D2[0:8, 0:8] = D2[0:8, 0:8] + np.dot(b[4] / dx ** 2, F5)
                D2[0:9, 0:9] = D2[0:9, 0:9] + np.dot(b[5] / dx ** 2, F6)
                D2[3:10, 3:10] = D2[3:10, 3:10] + np.dot(b[6] / dx ** 2, F7)
                D2[4:11, 4:11] = D2[4:11, 4:11] + np.dot(b[7] / dx ** 2, F8)
                D2[5:12, 5:12] = D2[5:12, 5:12] + np.dot(b[8] / dx ** 2, F9)
                D2[n - 6:n, n - 6:n] = D2[n - 6:n, n - 6:n] + np.dot(b[n - 1] / dx ** 2, FN)
                D2[n - 6:n, n - 6:n] = D2[n - 6:n, n - 6:n] + np.dot(b[n - 2] / dx ** 2, FNm1)
                D2[n - 6:n, n - 6:n] = D2[n - 6:n, n - 6:n] + np.dot(b[n - 3] / dx ** 2, FNm2)
                D2[n - 7:n, n - 7:n] = D2[n - 7:n, n - 7:n] + np.dot(b[n - 4] / dx ** 2, FNm3)
                D2[n - 8:n, n - 8:n] = D2[n - 8:n, n - 8:n] + np.dot(b[n - 5] / dx ** 2, FNm4)
                D2[n - 9:n, n - 9:n] = D2[n - 9:n, n - 9:n] + np.dot(b[n - 6] / dx ** 2, FNm5)
                D2[n - 10:n - 3, n - 10:n - 3] = D2[n - 10:n - 3, n - 10:n - 3] + np.dot(b[n - 7] / dx ** 2, FNm6)
                D2[n - 11:n - 4, n - 11:n - 4] = D2[n - 11:n - 4, n - 11:n - 4] + np.dot(b[n - 8] / dx ** 2, FNm7)
                D2[n - 12:n - 5, n - 12:n - 5] = D2[n - 12:n - 5, n - 12:n - 5] + np.dot(b[n - 9] / dx ** 2, FNm8)

                # interior of the operator
                for i in range(9, n - 9):
                    D2[i-3:i+4, i-3:i+4] = D2[i-3:i+4, i-3:i+4] + np.dot(b[i] / dx ** 2, Fint)

                d2p = D2
                # upper portion of db_mat
                db_mat[0:bn, 0:bn] = 1 / dx * np.asarray([[- 2.4627527915652583,4.002941726470849,- 2.315018727304732,0.9455422741396596,- 0.1707124817405184,0],[- 0.4073384847327758,- 0.5604439302999017,1.3189062135015222,- 0.4198019428248313,0.06867814435598675,0],[0.13640697936458196,- 0.7636947795725192,0.0685793845780439,0.6369732324821576,- 0.07826481685226427,0],[- 0.13665378940150058,0.5962233730614939,- 1.562355381925818,0.8573426255858562,0.24544317267996868,0],[0.40954732383510695,- 1.6191280365204503,3.1865688500220224,- 4.074262849037939,2.0972747117012602,0],[14.355731884974267,- 53.564429199973475,92.86093300468208,- 87.29186008807092,40.32232333454415,- 6.682698936156117]])
                # lower portion of db_mat
                db_mat[n - bn:n, n - bn:n] = - np.fliplr(np.flipud(db_mat[0:bn, 0:bn]))

            elif app == 1:
                d2p = d_mat @ np.diag(b) @ d_mat
                db_mat = d_mat

        elif p == 4:
            if app == 2:
                F1=[[4.00307941791739,2.1272942981535397,- 21.214273848979037,30.49727750118371,- 23.172841030755013,9.705138928731676,- 2.1635827089016697,0.2179074426494049],[3.4175522294647815,- 11.77520553959379,22.20487230528676,- 27.167142184812533,20.262630097160006,- 8.841757781109283,2.126283749245651,- 0.22723287564159236],[- 2.655537351937545,10.725651780326585,- 21.915228259545334,27.234063621923376,- 20.328888745358764,8.817804468878595,- 2.1010883530559,0.22322283876898727],[2.6096291230671604,- 11.273790472597184,23.713256661653002,- 29.637865514088407,22.142909564805933,- 9.592416599617703,2.2800330175938095,- 0.2417557808166145],[- 1.72161091965561,8.035063980517059,- 17.42370838266837,21.915505593567588,- 16.400143011202324,7.101704390964223,- 1.6851417053577276,0.1783300538351621],[0.6622902744939795,- 3.5254547019364657,7.995950705419648,- 10.14642490817106,7.609034895329863,- 3.292417092917118,0.779259261811113,- 0.08223843402996055],[- 0.12426102891718442,0.8574813751323345,- 2.0829000685616164,2.6750634144674112,- 2.010521063838384,0.8682092583958813,- 0.20457553910725843,0.021503652428816425],[0.00626979824392145,- 0.0871218575943182,0.235301119220535,- 0.30703010040930945,0.2311655398430554,- 0.09939891586155826,0.023243641828824047,- 0.0024292252711499685]]
                F1 = np.asarray(F1)
                F2=[[- 3.8578254335076183,0.8509299485061335,1.2339517333004915,4.210857266232357,- 3.37802560769432,1.03280155664039,- 0.09365710369542736,0.0009676402179939088],[1.555119308589368,- 2.6886123003621782,4.462353311018767,- 6.428176636149134,4.372028741422172,- 1.4546798752750298,0.1784681627254643,0.003499288030570427],[- 1.4334973908346058,4.738325707388153,- 8.89210407824314,10.483523172183006,- 6.930548975757782,2.3413634654615882,- 0.300088890397492,- 0.006973009799728032],[1.730064247287905,- 4.433878375449602,8.01517135451584,- 10.061268129615703,6.7155537319866445,- 2.257028541970038,0.285100376511403,0.006285336733550786],[- 1.3862608631871896,2.895883166640435,- 5.033394396109597,6.737022112784334,- 4.537981841330592,1.5177164075330671,- 0.18903749932595013,- 0.003947087004508258],[0.7103258913911261,- 1.096148312589214,1.7593093039611691,- 2.670111303104851,1.8276911672171527,- 0.6060506600403969,0.07360429806949471,0.001379615095519409],[- 0.2128153418286474,0.1952704662613326,- 0.24557220545735226,0.531450134794924,- 0.37671207493152004,0.12263654628272706,- 0.014064952319782047,- 0.0001925728016819689],[0.02846819286520211,- 0.007109486982855813,- 0.007350309758894249,- 0.03274771054081337,0.025993046043269873,- 0.007988898659827331,0.0007409309995144136,- 5.763965595635793e-06]]
                F2 = np.asarray(F2)
                F3=[[0.4232266843253621,0.07114871202319663,8.613641975253346,- 13.77803812476683,6.087813274363881,- 1.5925881104021078,0.1858429013703083,- 0.011047312167155468],[- 0.18590689301190114,- 0.07869786504619913,- 3.895522436861217,6.2722526995348735,- 2.766365952364848,0.7535891870848104,- 0.11156821397295934,0.01221947463744086],[0.007127985210495013,0.4988378308999125,1.3186286078039489,- 2.5406326045403773,1.0698906375040749,- 0.5935055631429491,0.31710801840640157,- 0.07745491214150656],[0.0896705630276365,- 0.7645435059558242,- 0.01352956599963028,0.6974971833782856,- 0.22564967954457368,0.5503566412415317,- 0.4525128613472827,0.11871122519985712],[0.04194708111549166,0.3491511669997655,1.6604755484891511,- 2.952598627903552,1.2683845985129651,- 0.5474085798169074,0.23426176777387633,- 0.054212955170790486],[- 0.08034999625532668,- 0.04096131522598445,- 1.700050833714181,2.7431332574210754,- 1.2091443254526089,0.33361704358280075,- 0.05260392350730192,0.006360093151527127],[0.04428666682579286,- 0.03510328247838659,0.8009965990665516,- 1.244356799574898,0.5543225150661697,- 0.1181976995137435,- 0.007398511545580169,0.005450512154094118],[- 0.008837962700611093,0.011518515755159314,- 0.1492056923323359,0.22738999215406405,- 0.10184882801449414,0.018448454427745172,0.004324009013789415,- 0.0017884883033168128]]
                F3 = np.asarray(F3)
                F4=[[0.010435644158564461,0.4757402944861679,- 4.12722083758031,- 1.007314775313365,5.667377115176639,- 1.2056070507181282,0.22053346754310088,- 0.03394385775266794],[0.17884965811944664,- 0.8884231478549698,2.971414495129215,- 1.1321604146411088,- 1.4154627218236087,0.4820792068030412,- 0.25968567094768424,0.06338859521566839],[- 0.24788690577367492,1.157219815723414,- 3.514035317750166,1.7014576694021246,1.153794172054021,- 0.49478741190347814,0.32680509578803396,- 0.08256711754027439],[0.4902227790473657,- 2.0540687298717475,5.038186162940613,- 3.7831090330675625,0.2735440351273663,0.43022065971971435,- 0.5415527613174372,0.1465568874216878],[- 0.4184575101762547,1.7251183148283193,- 4.070357984612999,3.279686416910769,- 0.5413764382830444,- 0.3011799041816671,0.4496535275895515,- 0.12308642207467514],[0.006830523580291881,- 0.1363377590128252,0.9482663236532394,0.13946692202021774,- 1.1701773740690997,0.2578901582652944,- 0.05566643271347528,0.00972763827635671],[0.06309136883486094,- 0.19395736886365827,0.07454020187526363,- 0.6124846718475904,0.8024796981070125,- 0.10926036794628621,- 0.03824763189093207,0.013838771731329946],[- 0.017818964299777532,0.059752366967718296,- 0.06158844169283728,0.16411277184673817,- 0.17244799727875193,0.019229755286836146,0.01302381389377443,- 0.004263304723700286]]
                F4 = np.asarray(F4)
                F5=[[- 0.06576719648041603,0.5764971777938658,- 2.5174657623772054,7.252280295066831,- 3.6434635950994436,- 1.7234941709366594,0.13223649176437266,- 0.008829605151285438,- 0.001993634580059848],[0.2587974266098374,- 1.130588582889451,2.782529122636772,- 4.8083980050479305,2.8454470264665854,0.0667238451774571,- 0.03573666326342328,0.01731604448380254,0.003909785826350065],[- 0.4468037133341918,1.8492959495280117,- 4.161499670925533,6.161561748361646,- 3.8762228420067713,0.49039274093126634,0.0179947317299862,- 0.028323734566559008,- 0.006395209717855597],[0.3679318401298223,- 1.5748196147304365,3.752234271671213,- 6.157618311676533,3.71679765359841,- 0.09714110813807751,- 0.036950617523746815,0.02411986722256105,0.005446019446786844],[- 0.316954110312368,1.3369003100651002,- 3.108873793137848,4.893149807850337,- 3.002635502674202,0.20008156126961926,0.023430882859111695,- 0.020475905727203224,- 0.004623250192547391],[0.24062537766668468,- 0.9733401983111956,2.09971975335732,- 2.8471281771733308,1.859355760379504,- 0.3974376068092309,- 6.853595870023113e-05,0.014907635214885123,0.0033659916340637417],[- 0.004328493713622413,0.03620698012969627,- 0.15482402224894404,0.44112343370650586,- 0.22227081882423658,- 0.10319146493038323,0.007964140858088086,- 0.0005545444983600012,- 0.00012521047874394358],[- 0.005011077030250265,0.016322725577135877,- 0.019016292630649394,- 0.023020503004325198,0.0011406717869316037,0.031570525151384296,- 0.0016796046865812633,- 0.00024999813943656584,- 5.6447024209095256e-05],[- 0.0009839540531376056,0.003685420040794093,- 0.006741091092625484,0.005496640975754353,- 0.004626962377293933,0.0033643677062299648,- 0.00012523060148660945,- 5.644572953743325e-05,- 1.2744868697344836e-05]]
                F5 = np.asarray(F5)
                F6=[[0.011670956847617027,0.2632287963423045,- 1.6552475341613004,4.31266749440632,- 6.914866954022278,3.8289791107483873,0.09936821163884431,0.06705936047245185,- 0.014189729403969063,0.0013302871316220996],[0.09869651481898045,- 0.5325756341862886,1.6089650863867282,- 2.9855290937201615,3.5763928648165173,- 2.0537518338797747,0.3969463147848999,- 0.13503971536976744,0.02857434079874908,- 0.0026788444498827262],[- 0.19922507481971222,0.9414887713780633,- 2.4882115124098196,4.0912610924653245,- 4.140013845857264,2.4336876538853147,- 0.8305314036463202,0.23699001698018074,- 0.05014697707670884,0.004701279100941454],[0.22583056082294942,- 1.076258048279537,2.864330381324112,- 4.721521334375489,4.760351757093305,- 2.7902121879630677,0.9541158228954767,- 0.2680361134466393,0.056716316611188006,- 0.0053171546822988755],[- 0.019461038193632645,0.23953896895314514,- 1.0627377855365043,2.4158902514532477,- 3.441153648398393,1.9105475580309792,- 0.08680899230455891,0.054667919877841226,- 0.011567706352688785,0.0010844724705645736],[0.03761586367996666,- 0.2245681872988703,0.7278858591811636,- 1.4002036950689567,1.7096369163935776,- 0.969004227655277,0.162274628804415,- 0.05399048574071598,0.011424361605183068,- 0.0010710339004859125],[- 0.13839658239928773,0.5534712481037558,- 1.1629086658581163,1.4244135615575029,- 0.675609351278053,0.4722970170178208,- 0.5867059336448659,0.14035311054732974,- 0.02969865274050903,0.0027842486944227216],[0.032504158224122844,- 0.12729328675824783,0.2582501612933166,- 0.29834344393757944,0.10511066444238067,- 0.08150974341693518,0.13749171420740952,- 0.03242884715144912,0.006861928934600703,- 0.0006433058376188158],[- 0.007003310385768934,0.026934582329922564,- 0.05285914855146418,0.0572435028785741,- 0.01157699450740387,0.011418849904379642,- 0.029703425650513173,0.006861771549068643,- 0.001451947659911492,0.00013612009311670238],[0.0006565603486658375,- 0.0025251170934302404,0.004955545176699767,- 0.005366578394866321,0.001085343235069113,- 0.0010705171785355915,0.00278469615473561,- 0.0006432910827251853,0.00013612009311670238,- 1.2761258729690848e-05]]
                F6 = np.asarray(F6)
                F7=[[0.10532767529248109,0.03855926773673531,- 1.586611558698499,4.5535063437250995,- 6.2048406660879145,5.024489879635774,- 2.0197230015008745,0.11265662462686289,- 0.02823918614808422,0.0053788925996350895,- 0.0005042711812157897],[- 0.03606075690953503,- 0.07910599159628189,0.8985621063198692,- 2.3721904586717026,3.0991661753722175,- 2.3187437174770182,0.9915591336413966,- 0.231119897344623,0.05793390158153782,- 0.011035028872673871,0.0010345339568131754],[0.024282603765450158,0.14510840413350645,- 1.1019242653459185,2.739199697663399,- 3.4628099830067094,2.4130131245287596,- 1.0946634520749507,0.42572071387363036,- 0.10627129290823159,0.02024215103013935,- 0.0018977016590755642],[- 0.022262778185736163,- 0.1816420596815958,1.2797764200049806,- 3.149766050527731,3.9723939727462216,- 2.7329469944683527,1.264661963581128,- 0.5402784842804341,0.13302700587291544,- 0.02533847730912675,0.002375482247730633],[0.030582126097456818,0.08483372699394308,- 0.8760968214091781,2.3262478540123497,- 3.085098864530081,2.3232753789342953,- 1.0198610877251741,0.2675217526398013,- 0.06212865411692973,0.011834029355605662,- 0.001109440252088031],[- 0.06787942884344471,0.16745869963582335,0.004093166704561069,- 0.6578656853495927,1.350125213326806,- 1.6888721603141783,0.5249850589336753,0.4694248954956689,- 0.1226397094316947,0.023359944653656133,- 0.0021899948112802624],[0.005365884773126579,0.006302973431480126,- 0.11350576618371713,0.3337775085120101,- 0.47848798623408584,0.39426988357973214,- 0.17225991144421024,0.028356631081272708,- 0.004616032680735403,0.0008792443201400768,- 8.24291550131322e-05],[0.05474936329354315,- 0.21786191778964914,0.45992585891700677,- 0.5783498570378754,0.31339234349218476,0.4313387547986475,0.0433028829255566,- 0.6385084645734125,0.1595529067887173,- 0.03039102986451758,0.0028491590497985234],[- 0.013937389502383468,0.054609324247643656,- 0.11201891691296834,0.1342635109014147,- 0.062178539594143975,- 0.12258054171551354,- 0.004616774529490423,0.1595492472755737,- 0.03999357257972828,0.007617823348519672,- 0.0007141709389237192],[0.002654740857596851,- 0.01040177604717022,0.02133693655485111,- 0.025574002076459944,0.01184353135126552,0.02334867461247877,0.0008793856246648426,- 0.03039033281439499,0.007617823348519672,- 0.0014510139711466042,0.00013603255979499415],[- 0.0002488819553997048,0.0009751665044222082,- 0.0020003378020172916,0.0023975626946681197,- 0.0011103310641811424,- 0.002188938244919885,- 8.2442402312329e-05,0.0028490937013495306,- 0.0007141709389237192,0.00013603255979499415,- 1.27530524807807e-05]]
                F7 = np.asarray(F7)
                F8=[[3.5108711550803253,- 13.373003747811548,26.750636930607964,- 33.209105339061715,24.503153778006546,- 10.036749317735506,1.846178517304868,0.02619709434594751,- 0.01909910678847376,- 0.005495907018778915,0.009986821835842229,- 0.003570878765466029],[- 1.6682472313928134,6.377314231016362,- 12.833090937320897,16.03318060582133,- 11.87319223601916,4.826716754585349,- 0.8538421179269823,- 0.045411173113998435,0.039486850484469475,0.007930852955131946,- 0.017006649186214955,0.006161050097421449],[1.801989079568026,- 6.896758034242292,13.90551650596902,- 17.40914929703468,12.908228514303996,- 5.239284213100697,0.9343824513627941,0.06089792246067022,- 0.07410866633112197,- 0.0053430942422350546,0.02179528878982928,- 0.008166457503307658],[- 2.0411798467995443,7.799392127863002,- 15.683015239943852,19.578489418911364,- 14.494396684808722,5.910042129033931,- 1.101977471982002,- 0.05065529707423283,0.09764047809217817,- 0.004560774412729938,- 0.016408884086559817,0.00663004520716812],[1.5719663858139687,- 5.99744867354535,12.02956676131672,- 14.977522701125741,11.070647407097985,- 4.524744147972174,0.8419766138413415,0.025904259676064995,- 0.0470912725097118,0.0016217186587661192,0.008526993066495925,- 0.0034033443183659963],[- 0.7441359467406592,2.846774150749544,- 5.735433100487727,7.173971557535829,- 5.310079731256692,2.1220840370293503,- 0.23212924996051426,- 0.022738725676629615,- 0.12727734686948586,0.0407585166361242,- 0.015544519304400158,0.0037503583452591126],[0.19339806288446354,- 0.7522062900049324,1.5556806445467568,- 1.9959616232721349,1.473384226709159,- 0.43128240229887327,- 0.5640336846406341,0.021303890446220556,0.6331854621357786,- 0.16675851990123108,0.039129299269727684,- 0.005839065874300572],[- 0.01336040067087382,0.057197474261587694,- 0.13539484803701,0.1960416908550617,- 0.15619101517720688,0.05209557549203523,0.007306023605312801,- 0.009142332107762606,0.0004916104128419783,0.0034624337139725183,- 0.003780320320918673,0.0012741079729600272],[- 0.009426323020170812,0.03722087003910327,- 0.07811679249489793,0.09854806028839319,- 0.04712908389698814,- 0.12721594171799977,0.6332872222140257,0.0004915991372419061,- 0.6400197450552195,0.15992054125714394,- 0.03038759494703749,0.0028271881964056947],[- 0.002712493072141932,0.007475735428894396,- 0.005632072534357274,- 0.004603167462608688,0.0016230207988229043,0.040738852627170925,- 0.16678531988488243,0.003462354299426333,0.15992054125714394,- 0.041365079283703025,0.00908456909780523,- 0.001206941271570366],[0.00492897440765956,- 0.016030710765592548,0.022974074909866117,- 0.01656140700889392,0.008533839715990765,- 0.015537019827186478,0.039135587791485606,- 0.0037802336153099827,- 0.03038759494703749,0.00908456909780523,- 0.0030253173359371935,0.0006652375771503356],[- 0.001762399523807333,0.0058074939420838766,- 0.008608135833317303,0.00669167242476988,- 0.00340607699393831,0.0037485489791151596,- 0.005840004278347711,0.0012740787499582829,0.0028271881964056947,- 0.001206941271570366,0.0006652375771503356,- 0.0001906619685022051]]
                F8 = np.asarray(F8)
                F9=[[- 0.0008921408088141385,0.004758084313675405,- 0.010705689705769662,0.014274252941026216,- 0.007434506740117822,0,0,0,0],[0.0047642032590845835,- 0.026997151801479307,0.06669884562718417,- 0.10481247169986083,0.05558237135598681,0.0047642032590845835,0,0,0],[- 0.01071256408385579,0.06665595429954713,- 0.1892552988147856,0.371368888240334,- 0.1844941592219608,- 0.05713367511389754,0.003570854694618596,0,0],[0.014286041951059543,- 0.10476430764110332,0.37143709072754816,- 0.9857368946231085,0.35715104877648857,0.40000917462966723,- 0.05714416780423817,0.004762013983686515,0],[- 0.00744047619047619,0.05555555555555555,- 0.18452380952380953,0.35714285714285715,- 0.44146825396825395,0.35714285714285715,- 0.18452380952380953,0.05555555555555555,- 0.00744047619047619],[0,0.004761904761904762,- 0.05714285714285714,0.4,0.35714285714285715,- 0.9857142857142858,0.37142857142857144,- 0.10476190476190476,0.014285714285714285],[0,0,0.0035714285714285713,- 0.05714285714285714,- 0.18452380952380953,0.37142857142857144,- 0.18928571428571428,0.06666666666666667,- 0.010714285714285714],[0,0,0,0.004761904761904762,0.05555555555555555,- 0.10476190476190476,0.06666666666666667,- 0.026984126984126985,0.004761904761904762],[0,0,0,0,- 0.00744047619047619,0.014285714285714285,- 0.010714285714285714,0.004761904761904762,- 0.0008928571428571428]]
                F9 = np.asarray(F9)
                F10=[[- 0.0008932881110783594,0.0047642032590845835,- 0.010719457332940312,0.01429260977725375,- 0.007444067592319662,0,0,0,0],[0.004761139592824795,- 0.02697979102600717,0.06665595429954713,- 0.10474507104214549,0.05554662858295594,0.004761139592824795,0,0,0],[- 0.010714531463294657,0.0666681957716112,- 0.18929005585153896,0.37143709072754816,- 0.18452804186785243,- 0.05714416780423817,0.0035715104877648857,0,0],[0.014285714285714285,- 0.10476190476190476,0.37142857142857144,- 0.9857142857142858,0.35714285714285715,0.4,- 0.05714285714285714,0.004761904761904762,0],[- 0.00744047619047619,0.05555555555555555,- 0.18452380952380953,0.35714285714285715,- 0.44146825396825395,0.35714285714285715,- 0.18452380952380953,0.05555555555555555,- 0.00744047619047619],[0,0.004761904761904762,- 0.05714285714285714,0.4,0.35714285714285715,- 0.9857142857142858,0.37142857142857144,- 0.10476190476190476,0.014285714285714285],[0,0,0.0035714285714285713,- 0.05714285714285714,- 0.18452380952380953,0.37142857142857144,- 0.18928571428571428,0.06666666666666667,- 0.010714285714285714],[0,0,0,0.004761904761904762,0.05555555555555555,- 0.10476190476190476,0.06666666666666667,- 0.026984126984126985,0.004761904761904762],[0,0,0,0,- 0.00744047619047619,0.014285714285714285,- 0.010714285714285714,0.004761904761904762,- 0.0008928571428571428]]
                F10 = np.asarray(F10)
                F11=[[- 0.000892713673654649,0.004761139592824795,- 0.01071256408385579,0.014283418778474385,- 0.007439280613788742,0,0,0,0],[0.004762013983686515,- 0.026984745907556916,0.0666681957716112,- 0.10476430764110332,0.055556829809676,0.004762013983686515,0,0,0],[- 0.010714285714285714,0.06666666666666667,- 0.18928571428571428,0.37142857142857144,- 0.18452380952380953,- 0.05714285714285714,0.0035714285714285713,0,0],[0.014285714285714285,- 0.10476190476190476,0.37142857142857144,- 0.9857142857142858,0.35714285714285715,0.4,- 0.05714285714285714,0.004761904761904762,0],[- 0.00744047619047619,0.05555555555555555,- 0.18452380952380953,0.35714285714285715,- 0.44146825396825395,0.35714285714285715,- 0.18452380952380953,0.05555555555555555,- 0.00744047619047619],[0,0.004761904761904762,- 0.05714285714285714,0.4,0.35714285714285715,- 0.9857142857142858,0.37142857142857144,- 0.10476190476190476,0.014285714285714285],[0,0,0.0035714285714285713,- 0.05714285714285714,- 0.18452380952380953,0.37142857142857144,- 0.18928571428571428,0.06666666666666667,- 0.010714285714285714],[0,0,0,0.004761904761904762,0.05555555555555555,- 0.10476190476190476,0.06666666666666667,- 0.026984126984126985,0.004761904761904762],[0,0,0,0,- 0.00744047619047619,0.014285714285714285,- 0.010714285714285714,0.004761904761904762,- 0.0008928571428571428]]
                F11 = np.asarray(F11)
                F12=[[- 0.0008928776219412214,0.004762013983686515,- 0.010714531463294657,0.014286041951059543,- 0.007440646849510179,0,0,0,0],[0.004761904761904762,- 0.026984126984126985,0.06666666666666667,- 0.10476190476190476,0.05555555555555555,0.004761904761904762,0,0,0],[- 0.010714285714285714,0.06666666666666667,- 0.18928571428571428,0.37142857142857144,- 0.18452380952380953,- 0.05714285714285714,0.0035714285714285713,0,0],[0.014285714285714285,- 0.10476190476190476,0.37142857142857144,- 0.9857142857142858,0.35714285714285715,0.4,- 0.05714285714285714,0.004761904761904762,0],[- 0.00744047619047619,0.05555555555555555,- 0.18452380952380953,0.35714285714285715,- 0.44146825396825395,0.35714285714285715,- 0.18452380952380953,0.05555555555555555,- 0.00744047619047619],[0,0.004761904761904762,- 0.05714285714285714,0.4,0.35714285714285715,- 0.9857142857142858,0.37142857142857144,- 0.10476190476190476,0.014285714285714285],[0,0,0.0035714285714285713,- 0.05714285714285714,- 0.18452380952380953,0.37142857142857144,- 0.18928571428571428,0.06666666666666667,- 0.010714285714285714],[0,0,0,0.004761904761904762,0.05555555555555555,- 0.10476190476190476,0.06666666666666667,- 0.026984126984126985,0.004761904761904762],[0,0,0,0,- 0.00744047619047619,0.014285714285714285,- 0.010714285714285714,0.004761904761904762,- 0.0008928571428571428]]
                F12 = np.asarray(F12)
                Fint=[[- 1.0 / 1120.0,1.0 / 210.0,- 3.0 / 280.0,1.0 / 70.0,- 5.0 / 672.0,0,0,0,0],[1.0 / 210.0,- 17.0 / 630.0,1.0 / 15.0,- 11.0 / 105.0,1.0 / 18.0,1.0 / 210.0,0,0,0],[- 3.0 / 280.0,1.0 / 15.0,- 53.0 / 280.0,13.0 / 35.0,- 31.0 / 168.0,- 2.0 / 35.0,1.0 / 280.0,0,0],[1.0 / 70.0,- 11.0 / 105.0,13.0 / 35.0,- 69.0 / 70.0,5.0 / 14.0,2.0 / 5.0,- 2.0 / 35.0,1.0 / 210.0,0],[- 5.0 / 672.0,1.0 / 18.0,- 31.0 / 168.0,5.0 / 14.0,- 445.0 / 1008.0,5.0 / 14.0,- 31.0 / 168.0,1.0 / 18.0,- 5.0 / 672.0],[0,1.0 / 210.0,- 2.0 / 35.0,2.0 / 5.0,5.0 / 14.0,- 69.0 / 70.0,13.0 / 35.0,- 11.0 / 105.0,1.0 / 70.0],[0,0,1.0 / 280.0,- 2.0 / 35.0,- 31.0 / 168.0,13.0 / 35.0,- 53.0 / 280.0,1.0 / 15.0,- 3.0 / 280.0],[0,0,0,1.0 / 210.0,1.0 / 18.0,- 11.0 / 105.0,1.0 / 15.0,- 17.0 / 630.0,1.0 / 210.0],[0,0,0,0,- 5.0 / 672.0,1.0 / 70.0,- 3.0 / 280.0,1.0 / 210.0,- 1.0 / 1120.0]]
                Fint = np.asarray(Fint)

                FN = np.fliplr(np.flipud(F1))
                FNm1 = np.fliplr(np.flipud(F2))
                FNm2 = np.fliplr(np.flipud(F3))
                FNm3 = np.fliplr(np.flipud(F4))
                FNm4 = np.fliplr(np.flipud(F5))
                FNm5 = np.fliplr(np.flipud(F6))
                FNm6 = np.fliplr(np.flipud(F7))
                FNm7 = np.fliplr(np.flipud(F8))
                FNm8 = np.fliplr(np.flipud(F9))
                FNm9 = np.fliplr(np.flipud(F10))
                FNm10 = np.fliplr(np.flipud(F11))
                FNm11 = np.fliplr(np.flipud(F12))

                D2 = np.zeros((n, n))
                D2[0:8, 0:8] = np.dot(b[0] / dx ** 2, F1)
                D2[0:8, 0:8] = D2[0:8, 0:8] + np.dot(b[1] / dx ** 2, F2)
                D2[0:8, 0:8] = D2[0:8, 0:8] + np.dot(b[2] / dx ** 2, F3)
                D2[0:8, 0:8] = D2[0:8, 0:8] + np.dot(b[3] / dx ** 2, F4)
                D2[0:9, 0:9] = D2[0:9, 0:9] + np.dot(b[4] / dx ** 2, F5)
                D2[0:10, 0:10] = D2[0:10, 0:10] + np.dot(b[5] / dx ** 2, F6)
                D2[0:11, 0:11] = D2[0:11, 0:11] + np.dot(b[6] / dx ** 2, F7)
                D2[0:12, 0:12] = D2[0:12, 0:12] + np.dot(b[7] / dx ** 2, F8)
                D2[4:13, 4:13] = D2[4:13, 4:13] + np.dot(b[8] / dx ** 2, F9)
                D2[5:14, 5:14] = D2[5:14, 5:14] + np.dot(b[9] / dx ** 2, F10)
                D2[6:15, 6:15] = D2[6:15, 6:15] + np.dot(b[10] / dx ** 2, F11)
                D2[7:16, 7:16] = D2[7:16, 7:16] + np.dot(b[11] / dx ** 2, F12)
                D2[n - 8:n, n - 8:n] = D2[n - 8:n, n - 8:n] + np.dot(b[n - 1] / dx ** 2, FN)
                D2[n - 8:n, n - 8:n] = D2[n - 8:n, n - 8:n] + np.dot(b[n - 2] / dx ** 2, FNm1)
                D2[n - 8:n, n - 8:n] = D2[n - 8:n, n - 8:n] + np.dot(b[n - 3] / dx ** 2, FNm2)
                D2[n - 8:n, n - 8:n] = D2[n - 8:n, n - 8:n] + np.dot(b[n - 4] / dx ** 2, FNm3)
                D2[n - 9:n, n - 9:n] = D2[n - 9:n, n - 9:n] + np.dot(b[n - 5] / dx ** 2, FNm4)
                D2[n - 10:n, n - 10:n] = D2[n - 10:n, n - 10:n] + np.dot(b[n - 6] / dx ** 2, FNm5)
                D2[n - 11:n, n - 11:n] = D2[n - 11:n, n - 11:n] + np.dot(b[n - 7] / dx ** 2, FNm6)
                D2[n - 12:n, n - 12:n] = D2[n - 12:n, n - 12:n] + np.dot(b[n - 8] / dx ** 2, FNm7)
                D2[n - 13:n - 4, n - 13:n - 4] = D2[n - 13:n - 4, n - 13:n - 4] + np.dot(b[n - 9] / dx ** 2, FNm8)
                D2[n - 14:n - 5, n - 14:n - 5] = D2[n - 14:n - 5, n - 14:n - 5] + np.dot(b[n - 10] / dx ** 2, FNm9)
                D2[n - 15:n - 6, n - 15:n - 6] = D2[n - 15:n - 6, n - 15:n - 6] + np.dot(b[n - 11] / dx ** 2, FNm10)
                D2[n - 16:n - 7, n - 16:n - 7] = D2[n - 16:n - 7, n - 16:n - 7] + np.dot(b[n - 12] / dx ** 2, FNm11)

                for i in range(12, n - 12):
                    D2[i-4:i+5, i-4:i+5] = D2[i-4:i+5, i-4:i+5] + np.dot(b[i] / dx ** 2, Fint)

                d2p = D2

                # upper portion of db_mat
                db_mat[0:bn, 0:bn2] = 1 / dx * np.asarray([[- 2.200376739098629,2.7608012675787195,0,- 1.3691807035753567,1.1446822814973512,- 0.37364260295217966,0.03771649655009451,0,0,0,0,0],[- 0.651913329216443,0.24240780078556096,0,0.9104606814650275,- 0.6973946026278984,0.21818198152667295,- 0.021742531932919938,0,0,0,0,0],[- 0.06468384604166036,0,- 1.2908222624384893,2.055321052348157,- 0.9092929275698375,0.23102048983593335,- 0.021542506134103443,0,0,0,0,0],[0.01900102269911435,0,- 0.4537133356204391,- 0.28867574942049967,0.8783166693406234,- 0.1695048247752072,0.014576217776408266,0,0,0,0,0],[- 0.015429364960731877,0,0.2560755344056763,- 1.1189160300808965,0.5110523063245795,0.393792674582687,- 0.026575120271314638,0,0,0,0,0],[0.029171968430077504,0,- 0.4146236178554449,1.3666748629634018,- 2.476731024650295,1.3536210895426477,0.14188672156961313,0,0,0,0,0],[- 0.15106930932256663,0,1.9774402953292691,- 5.848575997544326,8.081431025847817,- 6.704263311037054,2.6450372967268607,0,0,0,0,0],[38.04646295025841,- 144.72251201026367,288.83796222411684,- 357.6960447261035,263.5541263681215,- 108.2829764439221,20.2629816377925,0,0,0,0,0]])
                # lower portion of db_mat
                db_mat[n - bn:n, n - bn2:n] = - np.fliplr(np.flipud(db_mat[0:bn, 0:bn2]))
            elif app == 1:
                d2p = d_mat @ np.diag(b) @ d_mat
                db_mat = d_mat

        d2p_ref = 1/(dx_ref**2)*((dx ** 2) * d2p)
        db_mat_ref = 1/dx_ref *(dx * db_mat)

        # oper_test = operator_test_1d(p, x_ref, h_mat_ref, d_mat_ref)
        # oper_test = operator_test_1d(p, x_ref, h_mat_ref, d_mat_ref, der=d2p_ref)

        return {'h_mat': h_mat, 'q_mat': q_mat, 'd_mat': d_mat, 'd2p': d2p, 'db_mat': db_mat, 'tl': txL, 'tr': txR,
                'e_mat': e_mat, 'x': x, 'x_ref': x_ref, 'd_mat_ref': d_mat_ref, 'h_mat_ref': h_mat_ref,
                'd2p_ref': d2p_ref, 'db_mat_ref': db_mat_ref}


# hqd = CSBPTypeOperators.hqd_csbp(4, 0, 2, 30, np.ones(50), 2)
# (p, xl, xr, n, b, app)